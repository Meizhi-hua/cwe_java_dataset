<?xml version="1.0" encoding="UTF-8"?>
<Weakness_Catalog xmlns="http://cwe.mitre.org/cwe-7" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="VIEW LIST: CWE-660: Weaknesses in Software Written in Java" Version="4.12" Date="2023-06-29" xsi:schemaLocation="http://cwe.mitre.org/cwe-7 http://cwe.mitre.org/data/xsd/cwe_schema_v7.0.xsd">
   <Weaknesses>
      <Weakness ID="102" Name="Struts: Duplicate Validation Forms" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.</Description>
         <Extended_Description>If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="694" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="1173" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Two validation forms with the same name.</Intro_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;form-validation&gt;<xhtml:div style="margin-left:1em;">&lt;formset&gt;<xhtml:div style="margin-left:1em;">&lt;form name="ProjectForm"&gt; ... &lt;/form&gt;<xhtml:br/>&lt;form name="ProjectForm"&gt; ... &lt;/form&gt;</xhtml:div>&lt;/formset&gt;</xhtml:div>&lt;/form-validation&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>It is critically important that validation logic be maintained and kept in sync with the rest of the product.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Struts: Duplicate Validation Forms</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Demonstrative_Example, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="103" Name="Struts: Incomplete validate() Method Definition" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().</Description>
         <Extended_Description>If the code does not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>The Struts Validator uses a form's validate() method to check the contents of the form properties against the constraints specified in the associated validation form. That means the following classes have a validate() method that is part of the validation framework: ValidatorForm, ValidatorActionForm, DynaValidatorForm, and DynaValidatorActionForm. If the code creates a class that extends one of these classes, and if that class implements custom validation logic by overriding the validate() method, the code must call super.validate() in the validate() implementation.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Disabling the validation framework for a form exposes the product to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Implement the validate() method and call super.validate() within that method.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and the RegistrationForm bean in the Struts framework will maintain the user data. Tthe RegistrationForm class implements the validate method to validate the user input entered into the form.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class RegistrationForm extends org.apache.struts.validator.ValidatorForm {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">// private variables for registration form<xhtml:br/>private String name;<xhtml:br/>private String email;<xhtml:br/>...<xhtml:br/>
                        <xhtml:br/>public RegistrationForm() {<xhtml:div style="margin-left:1em;">super();</xhtml:div>}<xhtml:br/>
                        <xhtml:br/>public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {<xhtml:div style="margin-left:1em;">ActionErrors errors = new ActionErrors();<xhtml:br/>if (getName() == null || getName().length() &lt; 1) {<xhtml:div style="margin-left:1em;">errors.add("name", new ActionMessage("error.name.required"));</xhtml:div>}<xhtml:br/>return errors;</xhtml:div>}</xhtml:div>
                     <xhtml:br/>
                     <xhtml:div style="margin-left:1em;">// getter and setter methods for private variables<xhtml:br/>...</xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>Although the validate method is implemented in this example the method does not call the validate method of the ValidatorForm parent class with a call super.validate(). Without the call to the parent validator class only the custom validation will be performed and the default validation will not be performed. The following example shows that the validate method of the ValidatorForm class is called within the implementation of the validate method.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public class RegistrationForm extends org.apache.struts.validator.ValidatorForm {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>// private variables for registration form<xhtml:br/>private String name;<xhtml:br/>private String email;<xhtml:br/>...<xhtml:br/>
                           <xhtml:br/>public RegistrationForm() {<xhtml:div style="margin-left:1em;">super();</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {<xhtml:div style="margin-left:1em;">ActionErrors errors = super.validate(mapping, request);<xhtml:br/>if (errors == null) {<xhtml:div style="margin-left:1em;">errors = new ActionErrors();</xhtml:div>}</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>if (getName() == null || getName().length() &lt; 1) {<xhtml:div style="margin-left:1em;">errors.add("name", new ActionMessage("error.name.required"));</xhtml:div>}<xhtml:br/>return errors;</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">// getter and setter methods for private variables<xhtml:br/>...</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Struts: Erroneous validate() Method</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">This could introduce other weaknesses related to missing input validation.</Note>
            <Note Type="Maintenance">The current description implies a loose composite of two separate weaknesses, so this node might need to be split or converted into a low-level category.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Maintenance_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Description, Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Background_Details, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="104" Name="Struts: Form Bean Does Not Extend Validation Class" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>In order to use the Struts Validator, a form must extend one of the following: ValidatorForm, ValidatorActionForm, DynaValidatorActionForm, and DynaValidatorForm. One of these classes must be extended because the Struts Validator ties in to the application by implementing the validate() method in these classes. Forms derived from the ActionForm and DynaActionForm classes cannot use the Struts Validator.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Bypassing the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is an important component of vulnerabilities like cross-site scripting, process control, and SQL injection.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that all forms extend one of the Validation Classes.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user information from a registration webpage for an online business site. The user will enter registration data and through the Struts framework the RegistrationForm bean will maintain the user data.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class RegistrationForm extends org.apache.struts.action.ActionForm {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>// private variables for registration form<xhtml:br/>private String name;<xhtml:br/>private String email;<xhtml:br/>...<xhtml:br/>
                           <xhtml:br/>public RegistrationForm() {<xhtml:div style="margin-left:1em;">super();</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>// getter and setter methods for private variables<xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the RegistrationForm class extends the Struts ActionForm class which does not allow the RegistrationForm class to use the Struts validator capabilities. When using the Struts framework to maintain user data in an ActionForm Bean, the class should always extend one of the validator classes, ValidatorForm, ValidatorActionForm, DynaValidatorForm or DynaValidatorActionForm. These validator classes provide default validation and the validate method for custom validation for the Bean object to use for validating input data. The following Java example shows the RegistrationForm class extending the ValidatorForm class and implementing the validate method for validating input data.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public class RegistrationForm extends org.apache.struts.validator.ValidatorForm {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>// private variables for registration form<xhtml:br/>private String name;<xhtml:br/>private String email;<xhtml:br/>...<xhtml:br/>
                           <xhtml:br/>public RegistrationForm() {<xhtml:div style="margin-left:1em;">super();</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}<xhtml:br/>
                           <xhtml:br/>// getter and setter methods for private variables<xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Note that the ValidatorForm class itself extends the ActionForm class within the Struts framework API.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Struts: Form Bean Does Not Extend Validation Class</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Background_Details</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="105" Name="Struts: Form Field Without Validator" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.</Description>
         <Extended_Description>Omitting validation for even a single input field may give attackers the leeway they need to compromise the product. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1173" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>Some products use the same ActionForm for more than one purpose. In situations like this, some fields may go unused under some action mappings.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If unused fields are not validated, shared business logic in an action may allow attackers to bypass the validation checks that are performed for other uses of the form.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example the Java class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data in the form fields using the private member variables. The RegistrationForm class uses the Struts validation capability by extending the ValidatorForm class and including the validation for the form fields within the validator XML file, validator.xml.</Intro_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>public class RegistrationForm extends org.apache.struts.validator.ValidatorForm {<xhtml:div style="margin-left:1em;">
                        <xhtml:br/>
                        <xhtml:i>// private variables for registration form</xhtml:i>
                        <xhtml:br/>private String name;<xhtml:br/>private String address;<xhtml:br/>private String city;<xhtml:br/>private String state;<xhtml:br/>private String zipcode;<xhtml:br/>private String phone;<xhtml:br/>private String email;<xhtml:br/>
                        <xhtml:br/>public RegistrationForm() {<xhtml:div style="margin-left:1em;">super();</xhtml:div>}<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i>// getter and setter methods for private variables</xhtml:i>
                        <xhtml:br/>...<xhtml:br/>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The validator XML file, validator.xml, provides the validation for the form fields of the RegistrationForm.</Body_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;form-validation&gt;<xhtml:div style="margin-left:1em;">&lt;formset&gt;<xhtml:div style="margin-left:1em;">&lt;form name="RegistrationForm"&gt;<xhtml:div style="margin-left:1em;">&lt;field property="name" depends="required"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.name"/&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="address" depends="required"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.address"/&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="city" depends="required"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.city"/&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="state" depends="required,mask"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.state"/&gt;<xhtml:br/>&lt;var&gt;<xhtml:div style="margin-left:1em;">&lt;var-name&gt;mask&lt;/var-name&gt;<xhtml:br/>&lt;var-value&gt;[a-zA-Z]{2}&lt;/var-value&gt;</xhtml:div>&lt;/var&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="zipcode" depends="required,mask"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.zipcode"/&gt;<xhtml:br/>&lt;var&gt;<xhtml:div style="margin-left:1em;">&lt;var-name&gt;mask&lt;/var-name&gt;<xhtml:br/>&lt;var-value&gt;\d{5}&lt;/var-value&gt;</xhtml:div>&lt;/var&gt;</xhtml:div>&lt;/field&gt;</xhtml:div>&lt;/form&gt;</xhtml:div>&lt;/formset&gt;</xhtml:div>&lt;/form-validation&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>However, in the previous example the validator XML file, validator.xml, does not provide validators for all of the form fields in the RegistrationForm. Validator forms are only provided for the first five of the seven form fields. The validator XML file should contain validator forms for all of the form fields for a Struts ActionForm bean. The following validator.xml file for the RegistrationForm class contains validator forms for all of the form fields.</Body_Text>
               <Example_Code Nature="Good" Language="XML">
                  <xhtml:div>&lt;form-validation&gt;<xhtml:div style="margin-left:1em;">&lt;formset&gt;<xhtml:div style="margin-left:1em;">&lt;form name="RegistrationForm"&gt;<xhtml:div style="margin-left:1em;">&lt;field property="name" depends="required"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.name"/&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="address" depends="required"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.address"/&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="city" depends="required"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.city"/&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="state" depends="required,mask"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.state"/&gt;<xhtml:br/>&lt;var&gt;<xhtml:div style="margin-left:1em;">&lt;var-name&gt;mask&lt;/var-name&gt;<xhtml:br/>&lt;var-value&gt;[a-zA-Z]{2}&lt;/var-value&gt;</xhtml:div>&lt;/var&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="zipcode" depends="required,mask"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.zipcode"/&gt;<xhtml:br/>&lt;var&gt;<xhtml:div style="margin-left:1em;">&lt;var-name&gt;mask&lt;/var-name&gt;<xhtml:br/>&lt;var-value&gt;\d{5}&lt;/var-value&gt;</xhtml:div>&lt;/var&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="phone" depends="required,mask"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.phone"/&gt;<xhtml:br/>&lt;var&gt;<xhtml:div style="margin-left:1em;">&lt;var-name&gt;mask&lt;/var-name&gt;<xhtml:br/>&lt;var-value&gt;^([0-9]{3})(-)([0-9]{4}|[0-9]{4})$&lt;/var-value&gt;</xhtml:div>&lt;/var&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="email" depends="required,email"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.email"/&gt;</xhtml:div>&lt;/field&gt;</xhtml:div>&lt;/form&gt;</xhtml:div>&lt;/formset&gt;</xhtml:div>&lt;/form-validation&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Struts: Form Field Without Validator</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Modes_of_Introduction, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Modes_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="106" Name="Struts: Plug-in Framework not in Use" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.</Description>
         <Extended_Description>
            <xhtml:p>Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.</xhtml:p>
            <xhtml:p>Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1173" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Use an input validation framework such as Struts.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use an input validation framework such as Struts.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>Phone number fields contain only valid characters in phone numbers</xhtml:li>
                        <xhtml:li>Boolean values are only "T" or "F"</xhtml:li>
                        <xhtml:li>Free-form strings are of a reasonable length and composition</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>Phone number fields contain only valid characters in phone numbers</xhtml:li>
                        <xhtml:li>Boolean values are only "T" or "F"</xhtml:li>
                        <xhtml:li>Free-form strings are of a reasonable length and composition</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class RegistrationForm extends org.apache.struts.action.ActionForm {<xhtml:div style="margin-left:1em;">
                        <xhtml:br/>
                        <xhtml:i>// private variables for registration form</xhtml:i>
                        <xhtml:br/>private String name;<xhtml:br/>private String email;<xhtml:br/>...<xhtml:br/>
                        <xhtml:br/>public RegistrationForm() {<xhtml:div style="margin-left:1em;">super();</xhtml:div>}<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i>// getter and setter methods for private variables</xhtml:i>
                        <xhtml:br/>...<xhtml:br/>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the RegistrationForm class extends the Struts ActionForm class which does use the Struts validator plug-in to provide validator capabilities. In the following example, the RegistrationForm Java class extends the ValidatorForm and Struts configuration XML file, struts-config.xml, instructs the application to use the Struts validator plug-in.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public class RegistrationForm extends org.apache.struts.validator.ValidatorForm {<xhtml:div style="margin-left:1em;">
                        <xhtml:br/>
                        <xhtml:i>// private variables for registration form</xhtml:i>
                        <xhtml:br/>private String name;<xhtml:br/>private String email;<xhtml:br/>...<xhtml:br/>
                        <xhtml:br/>public RegistrationForm() {<xhtml:div style="margin-left:1em;">super();</xhtml:div>}<xhtml:br/>
                        <xhtml:br/>public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i>// getter and setter methods for private variables</xhtml:i>
                        <xhtml:br/>...<xhtml:br/>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The plug-in tag of the Struts configuration XML file includes the name of the validator plug-in to be used and includes a set-property tag to instruct the application to use the file, validator-rules.xml, for default validation rules and the file, validation.XML, for custom validation.</Body_Text>
               <Example_Code Nature="Good" Language="XML">
                  <xhtml:div>&lt;struts-config&gt;<xhtml:div style="margin-left:1em;">
                        <xhtml:br/>&lt;form-beans&gt;<xhtml:div style="margin-left:1em;">&lt;form-bean name="RegistrationForm" type="RegistrationForm"/&gt;</xhtml:div>&lt;/form-beans&gt;<xhtml:br/>
                        <xhtml:br/>...<xhtml:br/>
                        <xhtml:br/>&lt;!-- ========================= Validator plugin ================================= --&gt;<xhtml:br/>&lt;plug-in className="org.apache.struts.validator.ValidatorPlugIn"&gt;<xhtml:div style="margin-left:1em;">&lt;set-property<xhtml:div style="margin-left:1em;">property="pathnames"<xhtml:br/>value="/WEB-INF/validator-rules.xml,/WEB-INF/validation.xml"/&gt;</xhtml:div>
                        </xhtml:div>&lt;/plug-in&gt;</xhtml:div>
                     <xhtml:br/>&lt;/struts-config&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Struts: Plug-in Framework Not In Use</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="107" Name="Struts: Unused Validation Form" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>An unused validation form indicates that validation logic is not up-to-date.</Description>
         <Extended_Description>It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1164" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Remove the unused Validation Form from the validation.xml file.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data in the form fields using the private member variables. The RegistrationForm class uses the Struts validation capability by extending the ValidatorForm class and including the validation for the form fields within the validator XML file, validator.xml.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class RegistrationForm extends org.apache.struts.validator.ValidatorForm {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// private variables for registration form</xhtml:i>
                           <xhtml:br/>private String name;<xhtml:br/>private String address;<xhtml:br/>private String city;<xhtml:br/>private String state;<xhtml:br/>private String zipcode;<xhtml:br/>
                           <xhtml:i>// no longer using the phone form field</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// private String phone;</xhtml:i>
                           <xhtml:br/>private String email;<xhtml:br/>
                           <xhtml:br/>public RegistrationForm() {<xhtml:div style="margin-left:1em;">super();</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// getter and setter methods for private variables</xhtml:i>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;form-validation&gt;<xhtml:div style="margin-left:1em;">
                        <xhtml:div>&lt;formset&gt;<xhtml:div style="margin-left:1em;">
                              <xhtml:div>&lt;form name="RegistrationForm"&gt;<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>&lt;field property="name" depends="required"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.name"/&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="address" depends="required"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.address"/&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="city" depends="required"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.city"/&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="state" depends="required,mask"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.state"/&gt;<xhtml:br/>&lt;var&gt;<xhtml:div style="margin-left:1em;">&lt;var-name&gt;mask&lt;/var-name&gt;<xhtml:br/>&lt;var-value&gt;[a-zA-Z]{2}&lt;/var-value&gt;</xhtml:div>&lt;/var&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="zipcode" depends="required,mask"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.zipcode"/&gt;<xhtml:br/>&lt;var&gt;<xhtml:div style="margin-left:1em;">&lt;var-name&gt;mask&lt;/var-name&gt;<xhtml:br/>&lt;var-value&gt;\d{5}&lt;/var-value&gt;</xhtml:div>&lt;/var&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="phone" depends="required,mask"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.phone"/&gt;<xhtml:br/>&lt;var&gt;<xhtml:div style="margin-left:1em;">&lt;var-name&gt;mask&lt;/var-name&gt;<xhtml:br/>&lt;var-value&gt;^([0-9]{3})(-)([0-9]{4}|[0-9]{4})$&lt;/var-value&gt;</xhtml:div>&lt;/var&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="email" depends="required,email"&gt;<xhtml:div style="margin-left:1em;">&lt;arg position="0" key="prompt.email"/&gt;</xhtml:div>&lt;/field&gt;</xhtml:div>
                                 </xhtml:div>&lt;/form&gt;</xhtml:div>
                           </xhtml:div>&lt;/formset&gt;</xhtml:div>
                     </xhtml:div>&lt;/form-validation&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>However, the validator XML file, validator.xml, for the RegistrationForm class includes the validation form for the user input form field "phone" that is no longer used by the input form and the RegistrationForm class. Any validation forms that are no longer required should be removed from the validator XML file, validator.xml.</Body_Text>
               <Body_Text>The existence of unused forms may be an indication to attackers that this code is out of date or poorly maintained.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Struts: Unused Validation Form</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="108" Name="Struts: Unvalidated Action Form" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Every Action Form must have a corresponding validation form.</Description>
         <Extended_Description>If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1173" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>If an action form mapping does not have a validation form defined, it may be vulnerable to a number of attacks that rely on unchecked input. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Map every Action Form to a corresponding validation form.</xhtml:p>
                  <xhtml:p>An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Struts: Unvalidated Action Form</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="109" Name="Struts: Validator Turned Off" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1173" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that an action form mapping enables validation. Set the validate field to true.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This mapping defines an action for a download form:</Intro_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;action path="/download"<xhtml:br/>type="com.website.d2.action.DownloadAction"<xhtml:br/>name="downloadForm"<xhtml:br/>scope="request"<xhtml:br/>input=".download"<xhtml:br/>validate="false"&gt;<xhtml:br/>&lt;/action&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This mapping has disabled validation. Disabling validation exposes this action to numerous types of attacks.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Struts: Validator Turned Off</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Other">The Action Form mapping in the demonstrative example disables the form's validate() method. The Struts bean: write tag automatically encodes special HTML characters, replacing a &lt; with "&amp;lt;" and a &gt; with "&amp;gt;". This action can be disabled by specifying filter="false" as an attribute of the tag to disable specified JSP pages. However, being disabled makes these pages susceptible to cross-site scripting attacks. An attacker may be able to insert malicious scripts as user input to write to these JSP pages.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="110" Name="Struts: Validator Without Form Field" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.</Description>
         <Extended_Description>
            <xhtml:p>It is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form.</xhtml:p>
            <xhtml:p>Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1164" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis</Method>
               <Description>To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example shows an inconsistency between an action form and a validation form. with a third field.</Intro_Text>
               <Body_Text>This first block of code shows an action form that has two fields, startDate and endDate.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class DateRangeForm extends ValidatorForm {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>String startDate, endDate;<xhtml:br/>
                           <xhtml:br/>public void setStartDate(String startDate) {<xhtml:div style="margin-left:1em;">this.startDate = startDate;</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public void setEndDate(String endDate) {<xhtml:div style="margin-left:1em;">this.endDate = endDate;</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This second block of related code shows a validation form with a third field: scale. The presence of the third field suggests that DateRangeForm was modified without taking validation into account.</Body_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;form name="DateRangeForm"&gt;<xhtml:div style="margin-left:1em;">&lt;field property="startDate" depends="date"&gt;<xhtml:div style="margin-left:1em;">&lt;arg0 key="start.date"/&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="endDate" depends="date"&gt;<xhtml:div style="margin-left:1em;">&lt;arg0 key="end.date"/&gt;</xhtml:div>&lt;/field&gt;<xhtml:br/>&lt;field property="scale" depends="integer"&gt;<xhtml:div style="margin-left:1em;">&lt;arg0 key="range.scale"/&gt;</xhtml:div>&lt;/field&gt;</xhtml:div>&lt;/form&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Struts: Validator Without Form Field</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="111" Name="Direct Use of Unsafe JNI" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.</Description>
         <Extended_Description>Many safety features that programmers may take for granted do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="695" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Implement error handling around the JNI call.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Refactoring</Strategy>
               <Description>Do not use JNI calls if you don't trust the native library.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Refactoring</Strategy>
               <Description>Be reluctant to use JNI calls. A Java API equivalent may exist.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code defines a class named Echo. The class declares one native method (defined below), which uses C to echo commands entered on the console back to the user. The following C code defines the native method implemented in the Echo class:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>class Echo {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>public native void runEcho();<xhtml:br/>static {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>System.loadLibrary("echo");</xhtml:div>
                           </xhtml:div>}<xhtml:br/>public static void main(String[] args) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>new Echo().runEcho();</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>#include &lt;jni.h&gt;<xhtml:br/>#include "Echo.h"//the java class above compiled with javah<xhtml:br/>#include &lt;stdio.h&gt;<xhtml:br/>
                     <xhtml:br/>JNIEXPORT void JNICALL<xhtml:br/>Java_Echo_runEcho(JNIEnv *env, jobject obj)<xhtml:br/>{<xhtml:div style="margin-left:1em;">char buf[64];<xhtml:br/>gets(buf);<xhtml:br/>printf(buf);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the example is implemented in Java, it may appear that it is immune to memory issues like buffer overflow vulnerabilities. Although Java does do a good job of making memory operations safe, this protection does not extend to vulnerabilities occurring in source code written in other languages that are accessed using the Java Native Interface. Despite the memory protections offered in Java, the C code in this example is vulnerable to a buffer overflow because it makes use of gets(), which does not check the length of its input.</Body_Text>
               <Body_Text>The Sun Java(TM) Tutorial provides the following description of JNI [See Reference]: The JNI framework lets your native method utilize Java objects in the same way that Java code uses these objects. A native method can create Java objects, including arrays and strings, and then inspect and use these objects to perform its tasks. A native method can also inspect and use objects created by Java application code. A native method can even update Java objects that it created or that were passed to it, and these updated objects are available to the Java application. Thus, both the native language side and the Java side of an application can create, update, and access Java objects and then share these objects between them.</Body_Text>
               <Body_Text>The vulnerability in the example above could easily be detected through a source code audit of the native method implementation. This may not be practical or possible depending on the availability of the C source code and the way the project is built, but in many cases it may suffice. However, the ability to share objects between Java and native methods expands the potential risk to much more insidious cases where improper data handling in Java may lead to unexpected vulnerabilities in native code or unsafe operations in native code corrupt data structures in Java. Vulnerabilities in native code accessed through a Java application are typically exploited in the same manner as they are in applications written in the native language. The only challenge to such an attack is for the attacker to identify that the Java application uses native code to perform certain operations. This can be accomplished in a variety of ways, including identifying specific behaviors that are often implemented with native code or by exploiting a system information exposure in the Java application that reveals its use of JNI [See Reference].</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Unsafe JNI</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC08-J</Entry_ID>
               <Entry_Name>Define wrappers around native methods</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Oracle Coding Standard for Java">
               <Entry_ID>JNI01-J</Entry_ID>
               <Entry_Name>Safely invoke standard APIs that perform tasks using the immediate caller's class loader instance (loadLibrary)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Oracle Coding Standard for Java">
               <Entry_ID>JNI00-J</Entry_ID>
               <Entry_Name>Define wrappers around native methods</Entry_Name>
			   <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-41"/>
            <Reference External_Reference_ID="REF-42"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Demonstrative_Example, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, References, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Potential_Mitigations, References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Unsafe JNI</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="1235" Name="Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.</Description>
         <Extended_Description>
            <xhtml:p>Languages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner.</xhtml:p>
	    <xhtml:p>However, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support "impedance mismatch" between reference types and primitives.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="400" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
			<Language Name="C#" Prevalence="Undetermined"/>
			<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
			<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
			<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
	       <Note>The programmer may use boxed primitives when not strictly necessary.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
			   <Impact>DoS: Resource Consumption (Memory)</Impact>
			   <Impact>DoS: Resource Consumption (Other)</Impact>
			   <Impact>Reduce Performance</Impact>
			   <Likelihood>Low</Likelihood>
               <Note>Incorrect autoboxing/unboxing would result in reduced performance, which sometimes can lead to resource consumption issues.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters.  Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Java has a boxed primitive for each primitive type. A long can be represented with the boxed primitive Long. Issues arise where boxed primitives are used when not strictly necessary.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
				<xhtml:div>Long count = 0L;
					<xhtml:br/>
					for (long i = 0; i &lt; Integer.MAX_VALUE; i++) {
					<xhtml:div style="margin-left:1em;">
						count += i;
						<xhtml:br/>
					</xhtml:div>
					}
				</xhtml:div>
               </Example_Code>
               <Body_Text>In the above loop, we see that the count variable is declared as a boxed primitive. This causes autoboxing on the line that increments. This causes execution to be magnitudes less performant (time and possibly space) than if the "long" primitive was used to declare the count variable, which can impact availability of a resource.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code uses primitive long which fixes the issue.</Intro_Text>
               <Example_Code Nature="Good" Language="Java">
				<xhtml:div>long count = 0L;
					<xhtml:br/>
					for (long i = 0; i &lt; Integer.MAX_VALUE; i++) {
					<xhtml:div style="margin-left:1em;">
						count += i;
						<xhtml:br/>
					</xhtml:div>
					}
				</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Oracle Coding Standard for Java">
               <Entry_ID>EXP04-J</Entry_ID>
               <Entry_Name>Do not pass arguments to certain Java Collections Framework methods that are a different type than the collection parameter type</Entry_Name>
            </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SI-2</Entry_Name>
	    </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1051"/>
			<Reference External_Reference_ID="REF-1052"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Joe Harvey</Submission_Name>
			   <Submission_Date>2019-10-14</Submission_Date>
			   <Submission_Version>4.0</Submission_Version>
			   <Submission_ReleaseDate>2020-02-24</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="1335" Name="Incorrect Bitwise Shift of Integer" Abstraction="Base" Structure="Simple" Status="Draft">
			<Description>An integer value is specified to be shifted by a negative amount or an amount greater than or equal to the number of bits contained in the value causing an unexpected or indeterminate result.</Description>
			<Extended_Description>
				<xhtml:p>Specifying a value to be shifted by a negative amount is undefined in various languages. Various computer architectures implement this action in different ways. The compilers and interpreters when generating code to accomplish a shift generally do not do a check for this issue.</xhtml:p>
				<xhtml:p>Specifying an over-shift, a shift greater than or equal to the number of bits contained in a value to be shifted, produces a result which varies by architecture and compiler. In some languages, this action is specifically listed as producing an undefined result.</xhtml:p>
			</Extended_Description>
			<Related_Weaknesses>
				<Related_Weakness Nature="ChildOf" CWE_ID="682" View_ID="1000" Ordinal="Primary"/>
			</Related_Weaknesses>
			<Applicable_Platforms>
				<Language Name="C" Prevalence="Undetermined"/>
				<Language Name="C++" Prevalence="Undetermined"/>
				<Language Name="C#" Prevalence="Undetermined"/>
				<Language Name="Java" Prevalence="Undetermined"/>
				<Language Name="JavaScript" Prevalence="Undetermined"/>
				<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
				<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
			</Applicable_Platforms>
			<Modes_Of_Introduction>
				<Introduction>
					<Phase>Implementation</Phase>
					<Note>Adding shifts without properly verifying the size and sign of the shift amount.</Note>
				</Introduction>
			</Modes_Of_Introduction>
			<Common_Consequences>
				<Consequence>
					<Scope>Integrity</Scope>
					<Impact>DoS: Crash, Exit, or Restart</Impact>
				</Consequence>
			</Common_Consequences>
			<Potential_Mitigations>
				<Mitigation>
					<Phase>Implementation</Phase>
					<Description>Implicitly or explicitly add checks and mitigation for negative or over-shift values.</Description>
				</Mitigation>
			</Potential_Mitigations>
			<Demonstrative_Examples>
				<Demonstrative_Example>
					<Intro_Text>
						A negative shift amount for an x86 or x86_64 shift instruction will produce the number of bits to be shifted by taking a 2's-complement of the shift amount and effectively masking that amount to the lowest 6 bits for a 64 bit shift instruction.
					</Intro_Text>
					<Example_Code Nature="Bad" Language="C">
					unsigned int r = 1 &lt;&lt; -5;
					</Example_Code>
					<Body_Text>The example above ends up with a shift amount of -5. The hexadecimal value is FFFFFFFFFFFFFFFD which, when bits above the  6th bit are masked off, the shift amount becomes a binary shift value of 111101 which is 61 decimal. A shift of 61 produces a very different result than -5. The previous example is a very simple version of the following code which is probably more realistic of what happens in a real system.</Body_Text>
					<Example_Code Nature="Bad" Language="C">
					  int choose_bit(int reg_bit, int bit_number_from_elsewhere) <xhtml:br/>
					  {<xhtml:br/>
					  <xhtml:div style="margin-left:1em;">
					    if (NEED_TO_SHIFT)<xhtml:br/>
					    {<xhtml:br/>
					    <xhtml:div style="margin-left:1em;">
					      reg_bit -= bit_number_from_elsewhere;<xhtml:br/>
					    </xhtml:div>
					    }<xhtml:br/>
					    return reg_bit;<xhtml:br/>
					  </xhtml:div>
					  }<xhtml:br/>
					  unsigned int handle_io_register(unsigned int *r)<xhtml:br/>
					  {<xhtml:br/>
					  <xhtml:div style="margin-left:1em;">
					    unsigned int the_bit = 1 &lt;&lt; choose_bit(5, 10);<xhtml:br/>
					    *r |= the_bit;<xhtml:br/>
					    return the_bit;<xhtml:br/>
					  </xhtml:div>
					  }
					</Example_Code>
					<Example_Code Nature="Good" Language="C">
					  int choose_bit(int reg_bit, int bit_number_from_elsewhere) <xhtml:br/>
					  {<xhtml:br/>
					  <xhtml:div style="margin-left:1em;">
					    if (NEED_TO_SHIFT)<xhtml:br/>
					    {<xhtml:br/>
					    <xhtml:div style="margin-left:1em;">
					      reg_bit -= bit_number_from_elsewhere;<xhtml:br/>
					    </xhtml:div>
					    }<xhtml:br/>
					    return reg_bit;<xhtml:br/>
					  </xhtml:div>
					  }<xhtml:br/>
					  <xhtml:br/>
					  unsigned int handle_io_register(unsigned int *r)<xhtml:br/>
					  {<xhtml:br/>
					  <xhtml:div style="margin-left:1em;">
					    int the_bit_number = choose_bit(5, 10);<xhtml:br/>
					    if ((the_bit_number &gt; 0) &amp;&amp; (the_bit_number &lt; 63))<xhtml:br/>
					    {<xhtml:br/>
					    <xhtml:div style="margin-left:1em;">
					      unsigned int the_bit = 1 &lt;&lt; the_bit_number;<xhtml:br/>
					      *r |= the_bit;<xhtml:br/>
					    </xhtml:div>
					    }<xhtml:br/>
					    return the_bit;<xhtml:br/>
					  </xhtml:div>
					  }
					</Example_Code>
					<Body_Text>Note that the good example not only checks for negative shifts and disallows them, but it also checks for over-shifts. No bit operation is done if the shift is out of bounds. Depending on the program, perhaps an error message should be logged.</Body_Text>
				</Demonstrative_Example>
			</Demonstrative_Examples>
			<Observed_Examples>
				<Observed_Example>
					<Reference>CVE-2009-4307</Reference>
					<Description>An unexpected large value in the ext4 filesystem causes an overshift condition resulting in a divide by zero.</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2009-4307</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2012-2100</Reference>
					<Description>An unexpected large value in the ext4 filesystem causes an overshift condition resulting in a divide by zero - fix of CVE-2009-4307.</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2012-2100</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2020-8835</Reference>
					<Description>An overshift in a kernel allowed out of bounds reads and writes resulting in a root takeover.</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2020-8835</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2015-1607</Reference>
					<Description>Program is not properly handling signed bitwise left-shifts causing an overlapping memcpy memory range error.</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2015-1607</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2016-9842</Reference>
					<Description>Compression function improperly executes a signed left shift of a negative integer.</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2016-9842</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2018-18445</Reference>
					<Description>Some kernels improperly handle right shifts of 32 bit numbers in a 64 bit register.</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2018-18445</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2013-4206</Reference>
					<Description>Putty  has an incorrectly sized shift value resulting in an overshift.</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2013-4206</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2018-20788</Reference>
					<Description>LED driver overshifts under certain conditions resulting in a DoS.</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2018-20788</Link>
				</Observed_Example>
			</Observed_Examples>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
			<Content_History>
				<Submission>
					<Submission_Name>CWE Content Team</Submission_Name>
					<Submission_Organization>MITRE</Submission_Organization>
					<Submission_Date>2021-03-29</Submission_Date>
					<Submission_Version>4.5</Submission_Version>
					<Submission_ReleaseDate>2021-07-20</Submission_ReleaseDate>
				</Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
			</Content_History>
		</Weakness>
      <Weakness ID="1336" Name="Improper Neutralization of Special Elements Used in a Template Engine" Abstraction="Base" Structure="Simple" Status="Incomplete">
			<Description>The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.</Description>
			<Extended_Description>
				<xhtml:p>Many web applications use template engines that allow developers to insert externally-influenced values into free text or messages in order to generate a full web page, document, message, etc. Such engines include Twig, Jinja2, Pug, Java Server Pages, FreeMarker, Velocity, ColdFusion, Smarty, and many others - including PHP itself. Some CMS (Content Management Systems) also use templates.</xhtml:p>
				<xhtml:p>Template engines often have their own custom command or expression language. If an attacker can influence input into a template before it is processed, then the attacker can invoke arbitrary expressions, i.e. perform injection attacks. For example, in some template languages, an attacker could inject the expression "{{7*7}}" and determine if the output returns "49" instead. The syntax varies depending on the language.</xhtml:p>
				<xhtml:p>In some cases, XSS-style attacks can work, which can obscure the root cause if the developer does not closely investigate the root cause of the error.</xhtml:p>
				<xhtml:p>Template engines can be used on the server or client, so both "sides" could be affected by injection. The mechanisms of attack or the affected technologies might be different, but the mistake is fundamentally the same.</xhtml:p>
			</Extended_Description>
			<Related_Weaknesses>
				<Related_Weakness Nature="ChildOf" CWE_ID="94" View_ID="1000" Ordinal="Primary"/>
			</Related_Weaknesses>
			<Applicable_Platforms>
				<Language Name="Java" Prevalence="Undetermined"/>
				<Language Name="PHP" Prevalence="Undetermined"/>
				<Language Name="Python" Prevalence="Undetermined"/>
				<Language Name="JavaScript" Prevalence="Undetermined"/>
				<Language Class="Interpreted" Prevalence="Undetermined"/>
				<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
				<Technology Class="Client Server" Prevalence="Undetermined"/>
				</Applicable_Platforms>
			<Alternate_Terms>
			  <Alternate_Term>
			    <Term>Server-Side Template Injection / SSTI</Term>
			    <Description>This term is used for injection into template engines being used by a server.</Description>
			  </Alternate_Term>
			  <Alternate_Term>
			    <Term>Client-Side Template Injection / CSTI</Term>
			    <Description>This term is used for injection into template engines being used by a client.</Description>
			  </Alternate_Term>
			</Alternate_Terms>
			<Modes_Of_Introduction>
				<Introduction>
					<Phase>Architecture and Design</Phase>
					<Note>The developer might choose a template engine that makes it easier for programmers to write vulnerable code.</Note>
				</Introduction>
				<Introduction>
					<Phase>Implementation</Phase>
					<Note>The programmer might not use engine's built-in sandboxes or other capabilities to escape or otherwise prevent template injection from untrusted input.</Note>
				</Introduction>
			</Modes_Of_Introduction>
			<Common_Consequences>
				<Consequence>
				  <Scope>Integrity</Scope>
				  <Impact>Execute Unauthorized Code or Commands</Impact>
				</Consequence>
			</Common_Consequences>
			<Potential_Mitigations>
				<Mitigation>
					<Phase>Architecture and Design</Phase>
					<Description>Choose a template engine that offers a sandbox or restricted mode, or at least limits the power of any available expressions, function calls, or commands.</Description>
				</Mitigation>
				<Mitigation>
					<Phase>Implementation</Phase>
					<Description>Use the template engine's sandbox or restricted mode, if available.</Description>
				</Mitigation>
			</Potential_Mitigations>
			<Observed_Examples>
				<Observed_Example>
					<Reference>CVE-2017-16783</Reference>
					<Description>server-side template injection in content management server</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2017-16783</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2020-9437</Reference>
					<Description>authentication / identity management product has client-side template injection</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2020-9437</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2020-12790</Reference>
					<Description>Server-Side Template Injection using a Twig template</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2020-12790</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2021-21244</Reference>
					<Description>devops platform allows SSTI</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2021-21244</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2020-4027</Reference>
					<Description>bypass of Server-Side Template Injection protection mechanism with macros in Velocity templates</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2020-4027</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2020-26282</Reference>
					<Description>web browser proxy server allows Java EL expressions from Server-Side Template Injection</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2020-26282</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2020-1961</Reference>
					<Description>SSTI involving mail templates and JEXL expressions</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2020-1961</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2019-19999</Reference>
					<Description>product does not use a "safe" setting for a FreeMarker configuration, allowing SSTI</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2019-19999</Link>
				</Observed_Example>
				<Observed_Example>
					<Reference>CVE-2018-20465</Reference>
					<Description>product allows read of sensitive database username/password variables using server-side template injection</Description>
					<Link>https://www.cve.org/CVERecord?id=CVE-2018-20465</Link>
				</Observed_Example>
			</Observed_Examples>
			<References>
				<Reference External_Reference_ID="REF-1193"/>
				<Reference External_Reference_ID="REF-1194"/>
			</References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
			<Notes>
			  <Note Type="Relationship">
			    Since expression languages are often used in templating languages, there may be some overlap with CWE-917 (Expression Language Injection). XSS (CWE-79) is also co-located with template injection.
			  </Note>
			  <Note Type="Maintenance">The interrelationships and differences between CWE-917 and CWE-1336 need to be further clarified.</Note>
			</Notes>
			<Content_History>
				<Submission>
					<Submission_Name>CWE Content Team</Submission_Name>
					<Submission_Organization>MITRE</Submission_Organization>
					<Submission_Date>2021-07-19</Submission_Date>
					<Submission_Version>4.5</Submission_Version>
					<Submission_ReleaseDate>2021-07-20</Submission_ReleaseDate>
				</Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
			</Content_History>
		</Weakness>
      <Weakness ID="1341" Name="Multiple Releases of Same Resource or Handle" Abstraction="Base" Structure="Simple" Status="Incomplete">
			<Description>The product attempts to close or release a resource or handle more than once, without any successful open between the close operations.</Description>
			<Extended_Description>
			  <xhtml:p>Code typically requires "opening" handles or references to resources such as memory, files, devices, socket connections, services, etc. When the code is finished with using the resource, it is typically expected to "close" or "release" the resource, which indicates to the environment (such as the OS) that the resource can be re-assigned or reused by unrelated processes or actors - or in some cases, within the same process. API functions or other abstractions are often used to perform this release, such as free() or delete() within C/C++, or file-handle close() operations that are used in many languages.</xhtml:p>
			  <xhtml:p>Unfortunately, the implementation or design of such APIs might expect the developer to be responsible for ensuring that such APIs are only called once per release of the resource. If the developer attempts to release the same resource/handle more than once, then the API's expectations are not met, resulting in undefined and/or insecure behavior. This could lead to consequences such as memory corruption, data corruption, execution path corruption, or other consequences.</xhtml:p>
			  <xhtml:p>Note that while the implementation for most (if not all) resource reservation allocations involve a unique identifier/pointer/symbolic reference, then if this identifier is reused, checking the identifier for resource closure may result in a false state of openness and closing of the wrong resource. For this reason, reuse of identifiers is discouraged.</xhtml:p>
			</Extended_Description>
			<Related_Weaknesses>
				<Related_Weakness Nature="ChildOf" CWE_ID="675" View_ID="1000" Ordinal="Primary"/>
				<Related_Weakness Nature="CanPrecede" CWE_ID="672" View_ID="1000" Ordinal="Primary"/>
			</Related_Weaknesses>
			<Applicable_Platforms>	
				<Language Name="Java" Prevalence="Undetermined"/>
				<Language Name="Rust" Prevalence="Undetermined"/>
				<Language Class="Not Language-Specific" Prevalence="Undetermined"/>
				<Language Name="C" Prevalence="Undetermined"/>
				<Language Name="C++" Prevalence="Undetermined"/>
				<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
				<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
				<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
			</Applicable_Platforms>
			<Modes_Of_Introduction>
				<Introduction>
					<Phase>Implementation</Phase>
				</Introduction>
			</Modes_Of_Introduction>
			<Common_Consequences>
				<Consequence>
					<Scope>Availability</Scope>
					<Scope>Integrity</Scope>
					<Impact>DoS: Crash, Exit, or Restart</Impact>
					<Likelihood>Medium</Likelihood>
				</Consequence>
			</Common_Consequences>
			<Detection_Methods>
				<Detection_Method>
				  <Method>Automated Static Analysis</Method>
				  <Description>For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.</Description>
				</Detection_Method>
				<Detection_Method>
					<Method>Automated Dynamic Analysis</Method>
					<Description>Some compiler instrumentation tools such as AddressSanitizer (ASan) can indirectly detect some instances of this weakness.</Description>
				</Detection_Method>
			</Detection_Methods>
			<Potential_Mitigations>
				<Mitigation>
				  <Phase>Implementation</Phase>
				  <Description>Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.</Description>
				</Mitigation>
				<Mitigation>
				  <Phase>Implementation</Phase>
				  <Strategy>Refactoring</Strategy>
				  <Description>It can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer.</Description>
				</Mitigation>
				<Mitigation>
				  <Phase>Implementation</Phase>
				  <Strategy>Refactoring</Strategy>
				  <Description>When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.</Description>
				  <Effectiveness>Defense in Depth</Effectiveness>
				</Mitigation>
			</Potential_Mitigations>
			<Demonstrative_Examples>
				<Demonstrative_Example>
					<Intro_Text>This example attempts to close a file twice. In some cases, the C library fclose() function will catch the error and return an error code. In other implementations, a double-free (CWE-415) occurs, causing the program to fault. Note that the examples presented here are simplistic, and double fclose() calls will frequently be spread around a program, making them more difficult to find during code reviews.</Intro_Text>
					<Example_Code Nature="Bad" Language="C">
char b[2000];<xhtml:br/>
FILE *f = fopen("dbl_cls.c", "r");<xhtml:br/>
if (f)<xhtml:br/>
{<xhtml:br/>
	<xhtml:div style="margin-left:1em;">b[0] = 0;<xhtml:br/>
	fread(b, 1, sizeof(b) - 1, f);<xhtml:br/>
	printf("%s\n'", b);<xhtml:br/>
	int r1 = fclose(f);<xhtml:br/>
	printf("\n-----------------\n1 close done '%d'\n", r1);<xhtml:br/><xhtml:br/>
	int r2 = fclose(f);	// Double close<xhtml:br/>
	printf("2 close done '%d'\n", r2);</xhtml:div>
}
					</Example_Code>
					<Body_Text>There are multiple possible fixes. This fix only has one call to fclose(), which is typically the preferred handling of this problem - but this simplistic method is not always possible.<xhtml:br/>
					</Body_Text>
					<Example_Code Nature="Good" Language="C">
char b[2000];<xhtml:br/>
FILE *f = fopen("dbl_cls.c", "r");<xhtml:br/>
if (f)<xhtml:br/>
{<xhtml:br/>
	<xhtml:div style="margin-left:1em;">b[0] = 0;<xhtml:br/>
	fread(b, 1, sizeof(b) - 1, f);<xhtml:br/>
	printf("%s\n'", b);<xhtml:br/>
	int r = fclose(f);<xhtml:br/>
	printf("\n-----------------\n1 close done '%d'\n", r);</xhtml:div>
}
					</Example_Code>
					<Body_Text>This fix uses a flag to call fclose() only once. Note that this flag is explicit. The variable "f" could also have been used as it will be either NULL if the file is not able to be opened or a valid pointer if the file was successfully opened. If "f" is replacing "f_flg" then "f" would need to be set to NULL after the first fclose() call so the second fclose call would never be executed.<xhtml:br/>
					</Body_Text>
					<Example_Code Nature="Good" Language="C">
char b[2000];<xhtml:br/>
int f_flg = 0;<xhtml:br/>
FILE *f = fopen("dbl_cls.c", "r");<xhtml:br/>
if (f)<xhtml:br/>
{<xhtml:br/>
	<xhtml:div style="margin-left:1em;">f_flg = 1;<xhtml:br/>
	b[0] = 0;<xhtml:br/>
	fread(b, 1, sizeof(b) - 1, f);<xhtml:br/>
	printf("%s\n'", b);<xhtml:br/>
	if (f_flg)<xhtml:br/>
	{<xhtml:br/>
		<xhtml:div style="margin-left:1em;">int r1 = fclose(f);<xhtml:br/>
		f_flg = 0;<xhtml:br/>
		printf("\n-----------------\n1 close done '%d'\n", r1);</xhtml:div><xhtml:br/>
	}<xhtml:br/><xhtml:br/>
	if (f_flg)<xhtml:br/>
	{<xhtml:br/>
		<xhtml:div style="margin-left:1em;">int r2 = fclose(f);	// Double close<xhtml:br/>
		f_flg = 0;<xhtml:br/>
		printf("2 close done '%d'\n", r2);</xhtml:div><xhtml:br/>
	}</xhtml:div><xhtml:br/>
}
					</Example_Code>
				</Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-149">
               <Intro_Text>The following code shows a simple example of a double free vulnerability.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>char* ptr = (char*)malloc (SIZE);<xhtml:br/>...<xhtml:br/>if (abrt) {<xhtml:div style="margin-left:1em;">free(ptr);</xhtml:div>}<xhtml:br/>...<xhtml:br/>free(ptr);</xhtml:div>
               </Example_Code>
               <Body_Text>Double free vulnerabilities have two common (and sometimes overlapping) causes:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>Error conditions and other exceptional circumstances</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Confusion over which part of the program is responsible for freeing the memory</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
               <Body_Text>Although some double free vulnerabilities are not much more complicated than this example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once.</Body_Text>
            </Demonstrative_Example>
			</Demonstrative_Examples>
			<Observed_Examples>
			  <Observed_Example>
			    <Reference>CVE-2019-13351</Reference>
			    <Description>file descriptor double close can cause the wrong file to be associated with a file descriptor.</Description>
			    <Link>https://www.cve.org/CVERecord?id=CVE-2019-13351</Link>
			  </Observed_Example>
			  <Observed_Example>
			    <Reference>CVE-2006-5051</Reference>
			    <Description>Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition that leads to a double free (CWE-415).</Description>
			    <Link>https://www.cve.org/CVERecord?id=CVE-2006-5051</Link>
			  </Observed_Example>
			  <Observed_Example>
			    <Reference>CVE-2004-0772</Reference>
			    <Description>Double free resultant from certain error conditions.</Description>
			    <Link>https://www.cve.org/CVERecord?id=CVE-2004-0772</Link>
			  </Observed_Example>
			</Observed_Examples>
			<References>
				<Reference External_Reference_ID="REF-1198"/>
				<Reference External_Reference_ID="REF-1199"/>
				<Reference External_Reference_ID="REF-1200"/>
				<Reference External_Reference_ID="REF-1201"/>
			</References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
			<Notes>
			  <Note Type="Terminology">The terms related to "release"  may vary depending on the type of resource, programming language, specification, or framework. "Close" has been used synonymously for the release of resources like file descriptors and file handles. "Return" is sometimes used instead of Release. "Free" is typically used when releasing memory or buffers back into the system for reuse.
			  </Note>
			</Notes>
			<Content_History>
			  <Submission>
			    <Submission_Name>CWE Content Team</Submission_Name>
			    <Submission_Organization>MITRE</Submission_Organization>
			    <Submission_Date>2021-09-07</Submission_Date>
			    <Submission_Version>4.6</Submission_Version>
			    <Submission_ReleaseDate>2021-10-28</Submission_ReleaseDate>
			  </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
			</Content_History>
		</Weakness>
      <Weakness ID="191" Name="Integer Underflow (Wrap or Wraparound)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.</Description>
         <Extended_Description>This can happen in signed and unsigned cases.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="682" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="682" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Integer underflow</Term>
               <Description>
                  <xhtml:p>"Integer underflow" is sometimes used to identify signedness errors in which an originally positive number becomes negative as a result of subtraction. However, there are cases of bad subtraction in which unsigned integers are involved, so it's not always a signedness issue.</xhtml:p>
                  <xhtml:p>"Integer underflow" is occasionally used to describe array index errors in which the index is negative.</xhtml:p>
               </Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Impact>DoS: Instability</Impact>
               <Note>This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Memory</Impact>
               <Note>If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example subtracts from a 32 bit signed integer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>#include &lt;stdio.h&gt;<xhtml:br/>#include &lt;stdbool.h&gt;<xhtml:br/>main (void)<xhtml:br/>{<xhtml:div style="margin-left:1em;">int i;<xhtml:br/>i = -2147483648;<xhtml:br/>i = i - 1;<xhtml:br/>return 0;</xhtml:div>}<xhtml:br/>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>The example has an integer underflow. The value of i is already at the lowest negative value possible, so after subtracting 1, the new value of i is 2147483647.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-137">
               <Intro_Text>This code performs a stack allocation based on a length calculation.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>
		    int a = 5, b = 6;<xhtml:br/>
		    size_t len = a - b;<xhtml:br/>
		    char buf[len];    // Just blows up the stack
		  </xhtml:div>
		  }
               </Example_Code>
               <Body_Text>Since a and b are declared as signed ints, the "a - b" subtraction gives a negative result (-1). However, since len is declared to be unsigned, len is cast to an extremely large positive number (on 32-bit systems - 4294967295). As a result, the buffer buf[len] declaration uses an extremely large size to allocate on the stack, very likely more than the entire computer's memory space.</Body_Text>
	       <Body_Text>Miscalculations usually will not be so obvious. The calculation will either be complicated or the result of an attacker's input to attain the negative value.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-0816</Reference>
               <Description>Integer underflow in firewall via malformed packet.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0816</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1002</Reference>
               <Description>Integer underflow by packet with invalid length.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1002</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0199</Reference>
               <Description>Long input causes incorrect length calculation.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0199</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1891</Reference>
               <Description>Malformed icon causes integer underflow in loop counter variable.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1891</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Integer underflow (wrap or wraparound)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP1</Entry_ID>
               <Entry_Name>Glitch in computation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT30-C</Entry_ID>
               <Entry_Name>Ensure that unsigned integer operations do not wrap</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT32-C</Entry_ID>
               <Entry_Name>Ensure that operations on signed integers do not result in overflow</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 7: Integer Overflows.&#34; Page 119"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Demonstrative_Example</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="192" Name="Integer Coercion Error" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.</Description>
         <Extended_Description>Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="681" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>Integer coercion often leads to undefined states of execution resulting in infinite loops or crashes.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>In some cases, integer coercion errors can lead to exploitable buffer overflow conditions, resulting in the execution of arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Integer coercion errors result in an incorrect value being stored for the variable in question.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>A language which throws exceptions on ambiguous data casts might be chosen.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Design objects and program flow such that multiple or complex casts are unnecessary</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-21">
               <Intro_Text>The following code is intended to read an incoming packet from a socket and extract one or more headers.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>DataPacket *packet;<xhtml:br/>int numHeaders;<xhtml:br/>PacketHeader *headers;<xhtml:br/>
                     <xhtml:br/>sock=AcceptSocketConnection();<xhtml:br/>ReadPacket(packet, sock);<xhtml:br/>numHeaders =packet-&gt;headers;<xhtml:br/>
                     <xhtml:br/>if (numHeaders &gt; 100) {<xhtml:div style="margin-left:1em;">ExitError("too many headers!");</xhtml:div>}<xhtml:br/>headers = malloc(numHeaders * sizeof(PacketHeader);<xhtml:br/>ParsePacketHeaders(packet, headers);</xhtml:div>
               </Example_Code>
               <Body_Text>The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory (CWE-195). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-23">
               <Intro_Text>The following code reads a maximum size and performs validation on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of "short s" is forced in this particular example, short int's are frequently used within real-world code, such as code that processes structured data.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int GetUntrustedInt () {<xhtml:div style="margin-left:1em;">return(0x0000FFFF);</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>void main (int argc, char **argv) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>char path[256];<xhtml:br/>char *input;<xhtml:br/>int i;<xhtml:br/>short s;<xhtml:br/>unsigned int sz;<xhtml:br/>
                           <xhtml:br/>i = GetUntrustedInt();<xhtml:br/>s = i;<xhtml:br/>/* s is -1 so it passes the safety check - CWE-697 */<xhtml:br/>if (s &gt; 256) {<xhtml:div style="margin-left:1em;">DiePainfully("go away!\n");</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>/* s is sign-extended and saved in sz */<xhtml:br/>sz = s;<xhtml:br/>
                           <xhtml:br/>/* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */<xhtml:br/>printf("i=%d, s=%d, sz=%u\n", i, s, sz);<xhtml:br/>
                           <xhtml:br/>input = GetUserInput("Enter pathname:");<xhtml:br/>
                           <xhtml:br/>/* strncpy interprets s as unsigned int, so it's treated as MAX_INT<xhtml:br/>(CWE-195), enabling buffer overflow (CWE-119) */<xhtml:br/>strncpy(path, input, s);<xhtml:br/>path[255] = '\0'; /* don't want CWE-170 */<xhtml:br/>printf("Path is: %s\n", path);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code first exhibits an example of CWE-839, allowing "s" to be a negative number. When the negative short "s" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow (CWE-119).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Integer coercion error</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT02-C</Entry_ID>
               <Entry_Name>Understand integer conversion rules</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT05-C</Entry_ID>
               <Entry_Name>Do not use input functions to convert character data if they cannot handle all possible inputs</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT31-C</Entry_ID>
               <Entry_Name>Ensure that integer conversions do not result in lost or misinterpreted data</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 7: Integer Overflows.&#34; Page 119"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 6, &#34;Sign Extension&#34;, Page 248"/>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">Within C, it might be that "coercion" is semantically different than "casting", possibly depending on whether the programmer directly specifies the conversion, or if the compiler does it implicitly. This has implications for the presentation of this entry and others, such as CWE-681, and whether there is enough of a difference for these entries to be split.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Maintenance_Notes, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Maintenance_Notes, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="197" Name="Numeric Truncation Error" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.</Description>
         <Extended_Description>When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="681" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="681" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="681" View_ID="1340" Ordinal="Primary"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="195" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="196" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="192" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="194" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Memory</Impact>
               <Note>The true value of the data is lost and corrupted data is used.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-13">
             <Method>Fuzzing</Method>
             <Description>Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example, while not exploitable, shows the possible mangling of values associated with truncation errors:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int intPrimitive;<xhtml:br/>short shortPrimitive;<xhtml:br/>intPrimitive = (int)(~((int)0) ^ (1 &lt;&lt; (sizeof(int)*8-1)));<xhtml:br/>shortPrimitive = intPrimitive;<xhtml:br/>printf("Int MAXINT: %d\nShort MAXINT: %d\n", intPrimitive, shortPrimitive);</xhtml:div>
               </Example_Code>
               <Body_Text>The above code, when compiled and run on certain systems, returns the following output:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>Int MAXINT: 2147483647<xhtml:br/>Short MAXINT: -1</xhtml:div>
               </Example_Code>
               <Body_Text>This problem may be exploitable when the truncated value is used as an array index, which can happen implicitly when 64-bit values are used as indexes, as they are truncated to 32 bits.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example, the method updateSalesForProduct is part of a business application class that updates the sales information for a particular product. The method receives as arguments the product ID and the integer amount sold. The product ID is used to retrieve the total product count from an inventory object which returns the count as an integer. Before calling the method of the sales object to update the sales count the integer values are converted to The primitive type short since the method requires short type for the method arguments.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>
                     <xhtml:i>// update sales database for number of product sold with product ID</xhtml:i>
                     <xhtml:br/>public void updateSalesForProduct(String productID, int amountSold) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// get the total number of products in inventory database</xhtml:i>
                           <xhtml:br/>int productCount = inventory.getProductCount(productID);<xhtml:br/>
                           <xhtml:i>// convert integer values to short, the method for the</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// sales object requires the parameters to be of type short</xhtml:i>
                           <xhtml:br/>short count = (short) productCount;<xhtml:br/>short sold = (short) amountSold;<xhtml:br/>
                           <xhtml:i>// update sales database for product</xhtml:i>
                           <xhtml:br/>sales.updateSalesCount(productID, count, sold);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>However, a numeric truncation error can occur if the integer values are higher than the maximum value allowed for the primitive type short. This can cause unexpected results or loss or corruption of data. In this case the sales database may be corrupted with incorrect data. Explicit casting from a from a larger size primitive type to a smaller size primitive type should be prevented. The following example an if statement is added to validate that the integer values less than the maximum value for the primitive type short before the explicit cast and the call to the sales method.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>...<xhtml:br/>
                     <xhtml:i>// update sales database for number of product sold with product ID</xhtml:i>
                     <xhtml:br/>public void updateSalesForProduct(String productID, int amountSold) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// get the total number of products in inventory database</xhtml:i>
                           <xhtml:br/>int productCount = inventory.getProductCount(productID);<xhtml:br/>
                           <xhtml:i>// make sure that integer numbers are not greater than</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// maximum value for type short before converting</xhtml:i>
                           <xhtml:br/>if ((productCount &lt; Short.MAX_VALUE) &amp;&amp; (amountSold &lt; Short.MAX_VALUE)) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>// convert integer values to short, the method for the</xhtml:i>
                                 <xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// sales object requires the parameters to be of type short</xhtml:i>
                                 <xhtml:br/>short count = (short) productCount;<xhtml:br/>short sold = (short) amountSold;<xhtml:br/>
                                 <xhtml:i>// update sales database for product</xhtml:i>
                                 <xhtml:br/>sales.updateSalesCount(productID, count, sold);</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>else {<xhtml:br/>
                           <xhtml:i>// throw exception or perform other processing</xhtml:i>
                           <xhtml:br/>
                           <xhtml:div style="margin-left:1em;">...</xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2020-17087</Reference>
               <Description>Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-17087</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0231</Reference>
               <Description>Integer truncation of length value leads to heap-based buffer overflow.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0231</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3282</Reference>
               <Description>Size of a particular type changes for 64-bit platforms, leading to an integer truncation in document processor causes incorrect index to be generated.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3282</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Numeric truncation error</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Truncation error</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO34-C</Entry_ID>
               <Entry_Name>Distinguish between characters read from a file and EOF or WEOF</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FLP34-C</Entry_ID>
               <Entry_Name>Ensure that floating point conversions are within range of the new type</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT02-C</Entry_ID>
               <Entry_Name>Understand integer conversion rules</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT05-C</Entry_ID>
               <Entry_Name>Do not use input functions to convert character data if they cannot handle all possible inputs</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT31-C</Entry_ID>
               <Entry_Name>Ensure that integer conversions do not result in lost or misinterpreted data</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>NUM12-J</Entry_ID>
               <Entry_Name>Ensure conversions of numeric types to narrower types do not result in lost or misinterpreted data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP1</Entry_ID>
               <Entry_Name>Glitch in computation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 6, &#34;Truncation&#34;, Page 259"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Research Gap">This weakness has traditionally been under-studied and under-reported, although vulnerabilities in popular software have been published in 2008 and 2009.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Observed_Examples, Other_Notes, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="209" Name="Generation of Error Message Containing Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product generates an error message that includes sensitive information about its environment, users, or associated data.</Description>
         <Extended_Description><xhtml:p>The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways:</xhtml:p>
           <xhtml:ul>
             <xhtml:li>self-generated: the source code explicitly constructs the error message and delivers it</xhtml:li>
	     <xhtml:li>externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer</xhtml:li>
	   </xhtml:ul>
	 <xhtml:p>An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.</xhtml:p></Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="PHP" Prevalence="Often"/>
            <Language Name="Java" Prevalence="Often"/>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>System Configuration</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>This weakness generally requires domain-specific interpretation using manual analysis. However, the number of potential error conditions may be too large to cover completely within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</xhtml:p>
                  <xhtml:p>Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-12">
               <Method>Manual Dynamic Analysis</Method>
               <Description>Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.</Description>
            </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.</xhtml:p>
                  <xhtml:p>If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.</xhtml:p>
		  <xhtml:p>Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Handle exceptions internally and do not display errors containing potentially sensitive information to a user.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
               <Effectiveness_Notes>This makes it easier to spot places in the code where data is being used that is unencrypted.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Create default error pages or messages that do not leak any information.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, sensitive information might be printed depending on the exception that occurs.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">/.../</xhtml:div>}<xhtml:br/>catch (Exception e) {<xhtml:div style="margin-left:1em;">System.out.println(e);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an exception related to SQL is handled by the catch, then the output might contain sensitive information such as SQL query structure or private information. If this output is redirected to a web user, this may represent a security problem.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-118">
               <Intro_Text>This code tries to open a database connection, and prints any exceptions that occur.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">openDbConnection();</xhtml:div>}<xhtml:br/>
                     <xhtml:i>//print exception message that includes exception message and configuration file location</xhtml:i>
                     <xhtml:br/>catch (Exception $e) {<xhtml:div style="margin-left:1em;">echo 'Caught exception: ', $e-&gt;getMessage(), '\n';<xhtml:br/>echo 'Check credentials in config file at: ', $Mysql_config_location, '\n';</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code generates an error message that leaks the full pathname of the configuration file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>$ConfigDir = "/home/myprog/config";<xhtml:br/>$uname = GetUserInput("username");<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># avoid CWE-22, CWE-78, others.</xhtml:i>
                     <xhtml:br/>ExitError("Bad hacker!") if ($uname !~ /^\w+$/);<xhtml:br/>$file = "$ConfigDir/$uname.txt";<xhtml:br/>if (! (-e $file)) {<xhtml:div style="margin-left:1em;">ExitError("Error: $file does not exist");</xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-119">
               <Intro_Text>In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public BankAccount getUserBankAccount(String username, String accountNumber) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>BankAccount userAccount = null;<xhtml:br/>String query = null;<xhtml:br/>try {<xhtml:div style="margin-left:1em;">if (isAuthorizedUser(username)) {<xhtml:div style="margin-left:1em;">query = "SELECT * FROM accounts WHERE owner = "<xhtml:br/>+ username + " AND accountID = " + accountNumber;<xhtml:br/>DatabaseManager dbManager = new DatabaseManager();<xhtml:br/>Connection conn = dbManager.getConnection();<xhtml:br/>Statement stmt = conn.createStatement();<xhtml:br/>ResultSet queryResult = stmt.executeQuery(query);<xhtml:br/>userAccount = (BankAccount)queryResult.getObject(accountNumber);</xhtml:div>}</xhtml:div>} catch (SQLException ex) {<xhtml:div style="margin-left:1em;">String logMessage = "Unable to retrieve account information from database,\nquery: " + query;<xhtml:br/>Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);</xhtml:div>}<xhtml:br/>return userAccount;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-2049</Reference>
               <Description>POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2049</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5172</Reference>
               <Description>Program reveals password in error message if attacker can trigger certain database errors.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5172</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4638</Reference>
               <Description>Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4638</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1579</Reference>
               <Description>Existence of user names can be determined by requesting a nonexistent blog and reading the error message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1579</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1409</Reference>
               <Description>Direct request to library file in web application triggers pathname leak in error message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-1409</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3060</Reference>
               <Description>Malformed input to login page causes leak of full path when IMAP call fails.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3060</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0603</Reference>
               <Description>Malformed regexp syntax leads to information exposure in error message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-9615</Reference>
               <Description>verbose logging stores admin credentials in a world-readablelog file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-9615</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2018-1999036</Reference>
               <Description>SSH password for private key stored in build log</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2018-1999036</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Accidental leaking of sensitive information through error messages</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Information Leakage and Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR01-J</Entry_ID>
               <Entry_Name>Do not allow exceptions to expose sensitive information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="215"/>
            <Related_Attack_Pattern CAPEC_ID="463"/>
            <Related_Attack_Pattern CAPEC_ID="54"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-174"/>
            <Reference External_Reference_ID="REF-175" Section="Section 9.2, Page 326"/>
            <Reference External_Reference_ID="REF-176" Section="Chapter 16, &#34;General Good Practices.&#34; Page 415"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 11: Failure to Handle Errors Correctly.&#34; Page 183"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 12: Information Leakage.&#34; Page 191"/>
            <Reference External_Reference_ID="REF-179"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Overly Verbose Error Messages&#34;, Page 75"/>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name, Potential_Mitigations, References, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2010-09-09</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Name, Observed_Examples, References, Relationships, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Contribution Type="Feedback">
			      <Contribution_Name>Nick Johnston</Contribution_Name>
			      <Contribution_Date>2022-07-11</Contribution_Date>
			      <Contribution_Comment>Identified incorrect language tag in demonstrative example.</Contribution_Comment>
			   </Contribution>
            <Previous_Entry_Name Date="2009-01-12">Error Message Information Leaks</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-12-28">Error Message Information Leak</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through an Error Message</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="245" Name="J2EE Bad Practices: Direct Management of Connections" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The J2EE application directly manages connections, instead of using the container's connection management facilities.</Description>
         <Extended_Description>The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="695" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, the class DatabaseConnection opens and manages a connection to a database for a J2EE application. The method openDatabaseConnection opens a connection to the database using a DriverManager to create the Connection object conn to the database specified in the string constant CONNECT_STRING.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class DatabaseConnection {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>private static final String CONNECT_STRING = "jdbc:mysql://localhost:3306/mysqldb";<xhtml:br/>private Connection conn = null;<xhtml:br/>
                           <xhtml:br/>public DatabaseConnection() {<xhtml:br/>}<xhtml:br/>
                           <xhtml:br/>public void openDatabaseConnection() {<xhtml:div style="margin-left:1em;">try {<xhtml:div style="margin-left:1em;">conn = DriverManager.getConnection(CONNECT_STRING);</xhtml:div>} catch (SQLException ex) {...}</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>// Member functions for retrieving database connection and accessing database<xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The use of the DriverManager class to directly manage the connection to the database violates the J2EE restriction against the direct management of connections. The J2EE application should use the web application container's resource management facilities to obtain a connection to the database as shown in the following example.</Body_Text>
               <Example_Code Nature="Good">
                  <xhtml:div>public class DatabaseConnection {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>private static final String DB_DATASRC_REF = "jdbc:mysql://localhost:3306/mysqldb";<xhtml:br/>private Connection conn = null;<xhtml:br/>
                           <xhtml:br/>public DatabaseConnection() {<xhtml:br/>}<xhtml:br/>
                           <xhtml:br/>public void openDatabaseConnection() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>try {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>InitialContext ctx = new InitialContext();<xhtml:br/>DataSource datasource = (DataSource) ctx.lookup(DB_DATASRC_REF);<xhtml:br/>conn = datasource.getConnection();<xhtml:br/>
                                    </xhtml:div>
                                 </xhtml:div>} catch (NamingException ex) {...}<xhtml:br/>} catch (SQLException ex) {...}</xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:br/>// Member functions for retrieving database connection and accessing database<xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>J2EE Bad Practices: getConnection()</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">J2EE Bad Practices: getConnection()</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="246" Name="J2EE Bad Practices: Direct Use of Sockets" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The J2EE application directly uses sockets instead of using framework method calls.</Description>
         <Extended_Description>
            <xhtml:p>The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues.</xhtml:p>
            <xhtml:p>Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="695" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use framework method calls instead of using sockets directly.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example opens a socket to connect to a remote server.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// Perform servlet tasks.</xhtml:i>
                           <xhtml:br/>...<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// Open a socket to a remote server (bad).</xhtml:i>
                           <xhtml:br/>Socket sock = null;<xhtml:br/>
                           <xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>sock = new Socket(remoteHostname, 3000);<xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// Do something with the socket.</xhtml:i>
                                 <xhtml:br/>...</xhtml:div>
                           </xhtml:div>} catch (Exception e) {<xhtml:div style="margin-left:1em;">...</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>A Socket object is created directly within the Java servlet, which is a dangerous way to manage remote connections.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>J2EE Bad Practices: Sockets</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">J2EE Bad Practices: Sockets</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="248" Name="Uncaught Exception" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>An exception is thrown from a function, but it is not caught.</Description>
         <Extended_Description>When an exception is not caught, it may cause the program to crash or expose sensitive information.</Extended_Description>
         <Related_Weaknesses>
             <Related_Weakness Nature="ChildOf" CWE_ID="705" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Read Application Data</Impact>
               <Note>An uncaught exception could cause the system to be placed in a state that could lead to a crash, exposure of sensitive information or other unintended behaviors.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-39">
               <Intro_Text>The following example attempts to resolve a hostname.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException {<xhtml:div style="margin-left:1em;">String ip = req.getRemoteAddr();<xhtml:br/>InetAddress addr = InetAddress.getByName(ip);<xhtml:br/>...<xhtml:br/>out.println("hello " + addr.getHostName());</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>A DNS lookup failure will cause the Servlet to throw an exception.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The _alloca() function allocates memory on the stack. If an allocation request is too large for the available stack space, _alloca() throws an exception. If the exception is not caught, the program will crash, potentially enabling a denial of service attack. _alloca() has been deprecated as of Microsoft Visual Studio 2005(R). It has been replaced with the more secure _alloca_s().</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>EnterCriticalSection() can raise an exception, potentially causing the program to crash. Under operating systems prior to Windows 2000, the EnterCriticalSection() function can raise an exception in low memory situations. If the exception is not caught, the program will crash, potentially enabling a denial of service attack.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Often Misused: Exception Handling</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR05-J</Entry_ID>
               <Entry_Name>Do not let checked exceptions escape from a finally block</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR06-J</Entry_ID>
               <Entry_Name>Do not throw undeclared checked exceptions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>EXP31-PL</Entry_ID>
               <Entry_Name>Do not suppress or ignore exceptions</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP4</Entry_ID>
               <Entry_Name>Unchecked Status Condition</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-24</Modification_Date>
               <Modification_Comment>Removed C from Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-01-30">Often Misused: Exception Handling</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="362" Name="Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.</Description>
         <Extended_Description>
            <xhtml:p>This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider.</xhtml:p>
            <xhtml:p>A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc.</xhtml:p>
            <xhtml:p>A race condition violates these properties, which are closely related:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution.</xhtml:li>
                  <xhtml:li>Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource.</xhtml:li>
               </xhtml:ul>
            <xhtml:p>A race condition exists when an "interfering code sequence" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single "x++" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x).</xhtml:p>
            <xhtml:p>The interfering code sequence could be "trusted" or "untrusted." A trusted interfering code sequence occurs within the product; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable product.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="691" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Sometimes"/>
            <Language Name="C++" Prevalence="Sometimes"/>
            <Language Name="Java" Prevalence="Sometimes"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
			<Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400).</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Instability</Impact>
               <Note>When a race condition allows multiple control flows to access a resource simultaneously, it might lead the product(s) into unexpected states, possibly resulting in a crash.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Note>When a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59).</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Black box methods may be able to identify evidence of race conditions via methods such as multiple simultaneous connections, which may cause the software to become instable or crash. However, race conditions with very narrow timing windows would not be detectable.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>White Box</Method>
               <Description>Common idioms are detectable in white box analysis, such as time-of-check-time-of-use (TOCTOU) file operations (CWE-367), or double-checked locking (CWE-609).</Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</xhtml:p>
                  <xhtml:p>Race conditions may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.</xhtml:p>
                  <xhtml:p>Insert breakpoints or delays in between relevant code statements to artificially expand the race window so that it will be easier to detect.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use thread-safe capabilities such as the data access abstraction in Spring.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.</xhtml:p>
                  <xhtml:p>Additionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When using multithreading and operating on shared variables, only use thread-safe functions.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use atomic operations on shared variables. Be wary of innocent-looking constructs such as "x++". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code could be used in an e-commerce application that supports transfers between accounts. It takes the total amount of the transfer, sends it to the new account, and deducts the amount from the original account.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>$transfer_amount = GetTransferAmount();<xhtml:br/>$balance = GetBalanceFromDatabase();<xhtml:br/>
                     <xhtml:br/>if ($transfer_amount &lt; 0) {<xhtml:div style="margin-left:1em;">FatalError("Bad Transfer Amount");</xhtml:div>}<xhtml:br/>$newbalance = $balance - $transfer_amount;<xhtml:br/>if (($balance - $transfer_amount) &lt; 0) {<xhtml:div style="margin-left:1em;">FatalError("Insufficient Funds");</xhtml:div>}<xhtml:br/>SendNewBalanceToDatabase($newbalance);<xhtml:br/>NotifyUser("Transfer of $transfer_amount succeeded.");<xhtml:br/>NotifyUser("New balance: $newbalance");</xhtml:div>
               </Example_Code>
               <Body_Text>A race condition could occur between the calls to GetBalanceFromDatabase() and SendNewBalanceToDatabase().</Body_Text>
               <Body_Text>Suppose the balance is initially 100.00. An attack could be constructed as follows:</Body_Text>
               <Example_Code Nature="Attack" Language="Other">
                  <xhtml:div>In the following pseudocode, the attacker makes two simultaneous calls of the program, CALLER-1 and CALLER-2. Both callers are for the same user account.<xhtml:br/>CALLER-1 (the attacker) is associated with PROGRAM-1 (the instance that handles CALLER-1). CALLER-2 is associated with PROGRAM-2.<xhtml:br/>CALLER-1 makes a transfer request of 80.00.<xhtml:br/>PROGRAM-1 calls GetBalanceFromDatabase and sets $balance to 100.00<xhtml:br/>PROGRAM-1 calculates $newbalance as 20.00, then calls SendNewBalanceToDatabase().<xhtml:br/>Due to high server load, the PROGRAM-1 call to SendNewBalanceToDatabase() encounters a delay.<xhtml:br/>CALLER-2 makes a transfer request of 1.00.<xhtml:br/>PROGRAM-2 calls GetBalanceFromDatabase() and sets $balance to 100.00. This happens because the previous PROGRAM-1 request was not processed yet.<xhtml:br/>PROGRAM-2 determines the new balance as 99.00.<xhtml:br/>After the initial delay, PROGRAM-1 commits its balance to the database, setting it to 20.00.<xhtml:br/>PROGRAM-2 sends a request to update the database, setting the balance to 99.00</xhtml:div>
               </Example_Code>
               <Body_Text>At this stage, the attacker should have a balance of 19.00 (due to 81.00 worth of transfers), but the balance is 99.00, as recorded in the database.</Body_Text>
               <Body_Text>To prevent this weakness, the programmer has several options, including using a lock to prevent multiple simultaneous requests to the web application, or using a synchronization mechanism that includes all the code between GetBalanceFromDatabase() and SendNewBalanceToDatabase().</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-24">
               <Intro_Text>The following function attempts to acquire a lock in order to perform operations on a shared resource.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void f(pthread_mutex_t *mutex) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>pthread_mutex_lock(mutex);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* access shared resource */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:br/>pthread_mutex_unlock(mutex);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.</Body_Text>
               <Body_Text>In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels.</Body_Text>
               <Example_Code Nature="Good" Language="C">
                  <xhtml:div>int f(pthread_mutex_t *mutex) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>int result;<xhtml:br/>
                           <xhtml:br/>result = pthread_mutex_lock(mutex);<xhtml:br/>if (0 != result)<xhtml:div style="margin-left:1em;">return result;</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* access shared resource */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:br/>return pthread_mutex_unlock(mutex);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-132">
	       <Intro_Text>Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of "accessible" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs.</Intro_Text>
	       <Body_Text>Suppose the interconnect fabric does not prioritize such "update" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29527</Reference>
               <Description>Go application for cloud management creates a world-writable sudoers file that allows local attackers to inject sudo rules and escalate privileges to root by winning a race condition.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-1782</Reference>
               <Description>Chain: improper locking (CWE-667) leads to race condition (CWE-362), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-1782</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-0920</Reference>
               <Description>Chain: mobile platform race condition (CWE-362) leading to use-after-free (CWE-416), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-0920</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-6819</Reference>
               <Description>Chain: race condition (CWE-362) leads to use-after-free (CWE-416), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-6819</Link>
            </Observed_Example>
           <Observed_Example>
             <Reference>CVE-2019-18827</Reference>
             <Description>chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys</Description>
             <Link>https://www.cve.org/CVERecord?id=CVE-2019-18827</Link>
           </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2019-1161</Reference>
            <Description>Chain: race condition (CWE-362) in anti-malware product allows deletion of files by creating a junction (CWE-1386) and using hard links during the time window in which a temporary file is created and deleted.</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2019-1161</Link>
            </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2015-1743</Reference>
            <Description>TOCTOU in sandbox process allows installation of untrusted browser add-ons by replacing a file after it has been verified, but before it is executed</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2015-1743</Link>
            </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2014-8273</Reference>
            <Description>Chain: chipset has a race condition (CWE-362) between when an interrupt handler detects an attempt to write-enable the BIOS (in violation of the lock bit), and when the handler resets the write-enable bit back to 0, allowing attackers to issue BIOS writes during the timing window [REF-1237].</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2014-8273</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5044</Reference>
               <Description>Race condition leading to a crash by calling a hook removal procedure while other activities are occurring at the same time.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5044</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2958</Reference>
               <Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2958</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1570</Reference>
               <Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1570</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0058</Reference>
               <Description>Unsynchronized caching operation enables a race condition that causes messages to be sent to a deallocated object.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0379</Reference>
               <Description>Race condition during initialization triggers a buffer overflow.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0379</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6599</Reference>
               <Description>Daemon crash by quickly performing operations and undoing them, which eventually leads to an operation that does not acquire a lock.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6599</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6180</Reference>
               <Description>chain: race condition triggers NULL pointer dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6180</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5794</Reference>
               <Description>Race condition in library function could cause data to be sent to the wrong process.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5794</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3970</Reference>
               <Description>Race condition in file parser leads to heap corruption.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3970</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5021</Reference>
               <Description>chain: race condition allows attacker to access an object while it is still being initialized, causing software to access uninitialized memory.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5021</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4895</Reference>
               <Description>chain: race condition for an argument value, possibly resulting in NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4895</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3547</Reference>
               <Description>chain: race condition might allow resource to be released before operating on it, leading to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3547</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-5051</Reference>
               <Description>Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition (CWE-362) that leads to a double free (CWE-415).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-5051</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Race Conditions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>VNA03-J</Entry_ID>
               <Entry_Name>Do not assume that a group of calls to independently atomic methods is atomic</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="26"/>
            <Related_Attack_Pattern CAPEC_ID="29"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 13: Race Conditions.&#34; Page 205"/>
            <Reference External_Reference_ID="REF-349"/>
            <Reference External_Reference_ID="REF-350"/>
            <Reference External_Reference_ID="REF-351"/>
            <Reference External_Reference_ID="REF-352"/>
            <Reference External_Reference_ID="REF-353"/>
            <Reference External_Reference_ID="REF-354"/>
            <Reference External_Reference_ID="REF-355"/>
            <Reference External_Reference_ID="REF-356"/>
            <Reference External_Reference_ID="REF-357"/>
            <Reference External_Reference_ID="REF-76"/>
	    <Reference External_Reference_ID="REF-1237"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">The relationship between race conditions and synchronization problems (CWE-662) needs to be further developed. They are not necessarily two perspectives of the same core concept, since synchronization is only one technique for avoiding race conditions, and synchronization can be used for other purposes besides race condition prevention.</Note>
            <Note Type="Research Gap">Race conditions in web applications are under-studied and probably under-reported. However, in 2008 there has been growing interest in this area.</Note>
            <Note Type="Research Gap">Much of the focus of race condition research has been in Time-of-check Time-of-use (TOCTOU) variants (CWE-367), but many race conditions are related to synchronization problems that do not necessarily require a time-of-check.</Note>
            <Note Type="Research Gap">From a classification/taxonomy perspective, the relationships between concurrency and program state need closer investigation and may be useful in organizing related issues.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Research_Gaps, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>Martin Sebor</Contribution_Name>
               <Contribution_Organization>Cisco Systems, Inc.</Contribution_Organization>
               <Contribution_Date>2010-04-30</Contribution_Date>
               <Contribution_Comment>Provided Demonstrative Example</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2008-04-11">Race Conditions</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-12-13">Race Condition</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="366" Name="Race Condition within a Thread" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="362" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="662" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="662" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Unexpected State</Impact>
               <Note>The main problem is that -- if a lock is overcome -- data could be altered in a bad state.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int foo = 0;<xhtml:br/>int storenum(int num) {<xhtml:div style="margin-left:1em;">static int counter = 0;<xhtml:br/>counter++;<xhtml:br/>if (num &gt; foo) foo = num;<xhtml:br/>return foo;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public classRace {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>static int foo = 0;<xhtml:br/>public static void main() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>new Threader().start();<xhtml:br/>foo = 1;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>public static class Threader extends Thread {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>public void run() {<xhtml:div style="margin-left:1em;">System.out.println(foo);</xhtml:div>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Race condition within a thread</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>CON32-C</Entry_ID>
               <Entry_Name>Prevent data races when accessing bit-fields from multiple threads</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>CON40-C</Entry_ID>
               <Entry_Name>Do not refer to an atomic variable twice in an expression</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>CON43-C</Entry_ID>
               <Entry_Name>Do not allow data races in multithreaded code</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>VNA02-J</Entry_ID>
               <Entry_Name>Ensure that compound operations on shared variables are atomic</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>VNA03-J</Entry_ID>
               <Entry_Name>Do not assume that a group of calls to independently atomic methods is atomic</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP19</Entry_ID>
               <Entry_Name>Missing Lock</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="26"/>
            <Related_Attack_Pattern CAPEC_ID="29"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 13: Race Conditions.&#34; Page 205"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 13, &#34;Race Conditions&#34;, Page 759"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="374" Name="Passing Mutable Objects to an Untrusted Method" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product sends non-cloned mutable data as an argument to a method or function.</Description>
         <Extended_Description>The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Memory</Impact>
               <Note>Potentially data could be tampered with by another function which should not have been tampered with.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Pass in data which should not be altered as constant or immutable.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>private:<xhtml:div style="margin-left:1em;">int foo;<xhtml:br/>complexType bar;<xhtml:br/>String baz;<xhtml:br/>otherClass externalClass;</xhtml:div>
                     <xhtml:br/>
                     <xhtml:br/>public:<xhtml:div style="margin-left:1em;">void doStuff() {<xhtml:div style="margin-left:1em;">externalClass.doOtherStuff(foo, bar, baz)</xhtml:div>}</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>In this example, bar and baz will be passed by reference to doOtherStuff() which may change them.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example, the BookStore class manages the sale of books in a bookstore, this class includes the member objects for the bookstore inventory and sales database manager classes. The BookStore class includes a method for updating the sales database and inventory when a book is sold. This method retrieves a Book object from the bookstore inventory object using the supplied ISBN number for the book class, then calls a method for the sales object to update the sales information and then calls a method for the inventory object to update inventory for the BookStore.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class BookStore {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>private BookStoreInventory inventory;<xhtml:br/>private SalesDBManager sales;<xhtml:br/>...<xhtml:br/>
                           <xhtml:i>// constructor for BookStore</xhtml:i>
                           <xhtml:br/>public BookStore() {<xhtml:div style="margin-left:1em;">this.inventory = new BookStoreInventory();<xhtml:br/>this.sales = new SalesDBManager();<xhtml:br/>...</xhtml:div>}<xhtml:br/>public void updateSalesAndInventoryForBookSold(String bookISBN) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>// Get book object from inventory using ISBN</xhtml:i>
                                 <xhtml:br/>Book book = inventory.getBookWithISBN(bookISBN);<xhtml:br/>
                                 <xhtml:i>// update sales information for book sold</xhtml:i>
                                 <xhtml:br/>sales.updateSalesInformation(book);<xhtml:br/>
                                 <xhtml:i>// update inventory</xhtml:i>
                                 <xhtml:br/>inventory.updateInventory(book);</xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:i>// other BookStore methods</xhtml:i>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}<xhtml:br/>public class Book {<xhtml:div style="margin-left:1em;">private String title;<xhtml:br/>private String author;<xhtml:br/>private String isbn;<xhtml:br/>
                        <xhtml:i>// Book object constructors and get/set methods</xhtml:i>
                        <xhtml:br/>...</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, in this example the Book object that is retrieved and passed to the method of the sales object could have its contents modified by the method. This could cause unexpected results when the book object is sent to the method for the inventory object to update the inventory.</Body_Text>
               <Body_Text>In the Java programming language arguments to methods are passed by value, however in the case of objects a reference to the object is passed by value to the method. When an object reference is passed as a method argument a copy of the object reference is made within the method and therefore both references point to the same object. This allows the contents of the object to be modified by the method that holds the copy of the object reference. [REF-374]</Body_Text>
               <Body_Text>In this case the contents of the Book object could be modified by the method of the sales object prior to the call to update the inventory.</Body_Text>
               <Body_Text>To prevent the contents of the Book object from being modified, a copy of the Book object should be made before the method call to the sales object. In the following example a copy of the Book object is made using the clone() method and the copy of the Book object is passed to the method of the sales object. This will prevent any changes being made to the original Book object.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>...<xhtml:br/>public void updateSalesAndInventoryForBookSold(String bookISBN) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// Get book object from inventory using ISBN</xhtml:i>
                           <xhtml:br/>Book book = inventory.getBookWithISBN(bookISBN);<xhtml:br/>
                           <xhtml:i>// Create copy of book object to make sure contents are not changed</xhtml:i>
                           <xhtml:br/>Book bookSold = (Book) book.clone();<xhtml:br/>
                           <xhtml:i>// update sales information for book sold</xhtml:i>
                           <xhtml:br/>sales.updateSalesInformation(bookSold);<xhtml:br/>
                           <xhtml:i>// update inventory</xhtml:i>
                           <xhtml:br/>inventory.updateInventory(book);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Passing mutable objects to an untrusted method</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>OBJ04-J</Entry_ID>
               <Entry_Name>Provide mutable classes with copy functionality to safely allow passing instances to untrusted code</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-374"/>
            <Reference External_Reference_ID="REF-375"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Name, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2010-06-21">Mutable Objects Passed by Reference</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="375" Name="Returning a Mutable Object to an Untrusted Caller" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.</Description>
         <Extended_Description>In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Integrity</Scope>
               <Impact>Modify Memory</Impact>
               <Note>Potentially data could be tampered with by another function which should not have been tampered with.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Declare returned data which should not be altered as constant or immutable.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Clone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This class has a private list of patients, but provides a way to see the list :</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class ClinicalTrial {<xhtml:div style="margin-left:1em;">private PatientClass[] patientList = new PatientClass[50];<xhtml:br/>public getPatients(...){<xhtml:div style="margin-left:1em;">return patientList;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While this code only means to allow reading of the patient list, the getPatients() method returns a reference to the class's original patient list instead of a reference to a copy of the list. Any caller of this method can arbitrarily modify the contents of the patient list even though it is a private member of the class.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Mutable object returned</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>OBJ04-J</Entry_ID>
               <Entry_Name>Provide mutable classes with copy functionality to safely allow passing instances to untrusted code</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>OBJ05-J</Entry_ID>
               <Entry_Name>Defensively copy private mutable class members before returning their references</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>EXP34-PL</Entry_ID>
               <Entry_Name>Do not modify $_ in list or sorting functions</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Name, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2010-09-27">Passing Mutable Objects to an Untrusted Method</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="382" Name="J2EE Bad Practices: Use of System.exit()" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A J2EE application uses System.exit(), which also shuts down its container.</Description>
         <Extended_Description>It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="705" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>The shutdown function should be a privileged function available only to a properly authorized administrative user</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Web applications should not call methods that cause the virtual machine to exit, such as System.exit()</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Web applications should also not throw any Throwables to the application server as this may adversely affect the container.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Non-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Included in the doPost() method defined below is a call to System.exit() in the event of a specific exception.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:1em;">try {<xhtml:div style="margin-left:1em;">...</xhtml:div>} catch (ApplicationSpecificException ase) {<xhtml:div style="margin-left:1em;">logger.error("Caught: " + ase.toString());<xhtml:br/>System.exit(1);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>J2EE Bad Practices: System.exit()</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Denial of Service</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR09-J</Entry_ID>
               <Entry_Name>Do not allow untrusted code to terminate the JVM</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Modes_of_Introduction, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">J2EE Bad Practices: System.exit()</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="383" Name="J2EE Bad Practices: Direct Use of Threads" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>Thread management in a Web application is forbidden in some circumstances and is always highly error prone.</Description>
         <Extended_Description>Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="695" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For EJB, use framework approaches for parallel execution, instead of using threads.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, a new Thread object is created and invoked directly from within the body of a doGet() method in a Java servlet.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// Perform servlet tasks.</xhtml:i>
                           <xhtml:br/>...<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// Create a new thread to handle background processing.</xhtml:i>
                           <xhtml:br/>Runnable r = new Runnable() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>public void run() {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// Process and store request statistics.</xhtml:i>
                                       <xhtml:br/>...</xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>};<xhtml:br/>
                           <xhtml:br/>new Thread(r).start();</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>J2EE Bad Practices: Threads</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-01-30">J2EE Bad Practices: Threads</Previous_Entry_Name>
            <Previous_Entry_Name Date="2008-04-11">J2EE Bad Practices: Use of Threads</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="395" Name="Use of NullPointerException Catch to Detect NULL Pointer Dereference" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.</Description>
         <Extended_Description>
            <xhtml:p>Programmers typically catch NullPointerException under three circumstances:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem.</xhtml:li>
                  <xhtml:li>The program explicitly throws a NullPointerException to signal an error condition.</xhtml:li>
                  <xhtml:li>The code is part of a test harness that supplies unexpected input to the classes under test.</xhtml:li>
               </xhtml:ul>
            <xhtml:p>Of these three circumstances, only the last is acceptable.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="705" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code mistakenly catches a NullPointerException.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>try {
				  <xhtml:div style="margin-left:1em;">
					mysteryMethod();
				  </xhtml:div>
				  } catch (NullPointerException npe) {<xhtml:br/>
                  }</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Catching NullPointerException</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR08-J</Entry_ID>
               <Entry_Name>Do not catch NullPointerException or any of its ancestors</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Catch NullPointerException</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="396" Name="Declaration of Catch for Generic Exception" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.</Description>
         <Extended_Description>Multiple catch blocks can get ugly and repetitive, but "condensing" catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of a language's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="705" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
            <Language Name="Python" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Scope>Other</Scope>
               <Impact>Hide Activities</Impact>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code excerpt handles three types of exceptions in an identical fashion.</Intro_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">doExchange();</xhtml:div>}<xhtml:br/>catch (IOException e) {<xhtml:div style="margin-left:1em;">logger.error("doExchange failed", e);</xhtml:div>}<xhtml:br/>catch (InvocationTargetException e) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>logger.error("doExchange failed", e);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>catch (SQLException e) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>logger.error("doExchange failed", e);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>At first blush, it may seem preferable to deal with these exceptions in a single catch block, as follows:</Body_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">doExchange();</xhtml:div>}<xhtml:br/>catch (Exception e) {<xhtml:div style="margin-left:1em;">logger.error("doExchange failed", e);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, if doExchange() is modified to throw a new type of exception that should be handled in some different kind of way, the broad catch block will prevent the compiler from pointing out the situation. Further, the new catch block will now also handle exceptions derived from RuntimeException such as ClassCastException, and NullPointerException, which is not the programmer's intent.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Overly-Broad Catch Block</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP5</Entry_ID>
               <Entry_Name>Ambiguous Exception Type</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-396</Entry_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                <Entry_ID>ASCRM-CWE-396</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 9: Catching Exceptions.&#34; Page 157"/>
            <Reference External_Reference_ID="REF-961" Section="ASCRM-CWE-396"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-396"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-24</Modification_Date>
               <Modification_Comment>Removed C from Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
	    <Modification>
	       <Modification_Name>CWE Content Team</Modification_Name>
	       <Modification_Organization>MITRE</Modification_Organization>
	       <Modification_Date>2019-01-03</Modification_Date>
	       <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
	    </Modification>
	    <Modification>
	       <Modification_Name>CWE Content Team</Modification_Name>
	       <Modification_Organization>MITRE</Modification_Organization>
	       <Modification_Date>2020-02-24</Modification_Date>
	       <Modification_Comment>updated References</Modification_Comment>
	    </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
	    <Contribution Type="Content">
               <Contribution_Name>Drew Buttner</Contribution_Name>
               <Contribution_Organization>MITRE</Contribution_Organization>
               <Contribution_Date>2023-03-06</Contribution_Date>
               <Contribution_Comment>Suggested additional Applicable_Platforms and modification to extended description.</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2008-04-11">Overly-Broad Catch Block</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="397" Name="Declaration of Throws for Generic Exception" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.</Description>
         <Extended_Description>Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="705" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Scope>Other</Scope>
               <Impact>Hide Activities</Impact>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following method throws three types of exceptions.</Intro_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public void doExchange() throws IOException, InvocationTargetException, SQLException {<xhtml:div style="margin-left:1em;">...</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While it might seem tidier to write</Body_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>public void doExchange() throws Exception {<xhtml:div style="margin-left:1em;">...</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>doing so hampers the caller's ability to understand and handle the exceptions that occur. Further, if a later revision of doExchange() introduces a new type of exception that should be treated differently than previous exceptions, there is no easy way to enforce this requirement.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Early versions of C++ (C++98, C++03, C++11) included a feature known as Dynamic Exception Specification. This allowed functions to declare what type of exceptions it may throw. It is possible to declare a general class of exception to cover any derived exceptions that may be throw.</Intro_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>int myfunction() throw(std::exception) {<xhtml:div style="margin-left:1em;">if (0) throw out_of_range();<xhtml:br/>throw length_error();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>In the example above, the code declares that myfunction() can throw an exception of type "std::exception" thus hiding details about the possible derived exceptions that could potentially be thrown.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Overly-Broad Throws Declaration</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR07-J</Entry_ID>
               <Entry_Name>Do not throw RuntimeException, Exception, or Throwable</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP5</Entry_ID>
               <Entry_Name>Ambiguous Exception Type</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-397</Entry_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                <Entry_ID>ASCRM-CWE-397</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-961" Section="ASCRM-CWE-397"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-397"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
         	<Note Type="Applicable Platform">For C++, this weakness only applies to C++98, C++03, and C++11. It relies on a feature known as Dynamic Exception Specification, which was part of early versions of C++ but was deprecated in C++11. It has been removed for C++17 and later.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-24</Modification_Date>
               <Modification_Comment>Removed C from Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Overly-Broad Throws Declaration</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="460" Name="Improper Cleanup on Thrown Exception" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.</Description>
         <Extended_Description>Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="459" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Note>The code could be left in a bad state.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class foo {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public static final void main( String args[] ) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>boolean returnValue;<xhtml:br/>returnValue=doStuff();</xhtml:div>
                           </xhtml:div>}<xhtml:br/>public static final boolean doStuff( ) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>boolean threadLock;<xhtml:br/>boolean truthvalue=true;<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>while(<xhtml:br/>
                                       <xhtml:i>//check some condition</xhtml:i>
                                       <xhtml:br/>) {<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>
                                             <xhtml:br/>threadLock=true; //do some stuff to truthvalue<xhtml:br/>threadLock=false;</xhtml:div>
                                       </xhtml:div>}</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>catch (Exception e){<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>System.err.println("You did something bad");<xhtml:br/>if (something) return truthvalue;</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>return truthvalue;</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>In this case, you may leave a thread locked accidentally.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Improper cleanup on thrown exception</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR03-J</Entry_ID>
               <Entry_Name>Restore prior object state on method failure</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR05-J</Entry_ID>
               <Entry_Name>Do not let checked exceptions escape from a finally block</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>EXP31-PL</Entry_ID>
               <Entry_Name>Do not suppress or ignore exceptions</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="462" Name="Duplicate Key in Associative List (Alist)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.</Description>
         <Extended_Description>A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="694" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use a hash table instead of an alist.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code adds data to a list and then attempts to sort the data.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>alist = []<xhtml:br/>while (foo()): #now assume there is a string data with a key basename<xhtml:div style="margin-left:1em;">queue.append(basename,data)<xhtml:br/>queue.sort()</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>Since basename is not necessarily unique, this may not sort how one would like it to be.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Duplicate key in associative list (alist)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV02-C</Entry_ID>
               <Entry_Name>Beware of multiple environment variables with the same effective name</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="470" Name="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.</Description>
         <Extended_Description>If the product uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the product to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the product's classpath (CWE-427) or add new entries to the product's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the product.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Class="Interpreted" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Reflection Injection</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Note>The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Other</Impact>
               <Note>The attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the product to exit or hang.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>By causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as CWE-536.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Refactor your code to avoid using reflection.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use user-controlled inputs to select and load classes or code.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>A common reason that programmers use the reflection API is to implement their own command dispatcher. The following example shows a command dispatcher that does not use reflection:</Intro_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>String ctl = request.getParameter("ctl");<xhtml:br/>Worker ao = null;<xhtml:br/>if (ctl.equals("Add")) {<xhtml:div style="margin-left:1em;">ao = new AddCommand();</xhtml:div>}<xhtml:br/>else if (ctl.equals("Modify")) {<xhtml:div style="margin-left:1em;">ao = new ModifyCommand();</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">throw new UnknownActionError();</xhtml:div>}<xhtml:br/>ao.doAction(request);</xhtml:div>
               </Example_Code>
               <Body_Text>A programmer might refactor this code to use reflection as follows:</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String ctl = request.getParameter("ctl");<xhtml:br/>Class cmdClass = Class.forName(ctl + "Command");<xhtml:br/>Worker ao = (Worker) cmdClass.newInstance();<xhtml:br/>ao.doAction(request);</xhtml:div>
               </Example_Code>
               <Body_Text>The refactoring initially appears to offer a number of advantages. There are fewer lines of code, the if/else blocks have been entirely eliminated, and it is now possible to add new command types without modifying the command dispatcher. However, the refactoring allows an attacker to instantiate any object that implements the Worker interface. If the command dispatcher is still responsible for access control, then whenever programmers create a new class that implements the Worker interface, they must remember to modify the dispatcher's access control code. If they do not modify the access control code, then some Worker classes will not have any access control.</Body_Text>
               <Body_Text>One way to address this access control problem is to make the Worker object responsible for performing the access control check. An example of the re-refactored code follows:</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String ctl = request.getParameter("ctl");<xhtml:br/>Class cmdClass = Class.forName(ctl + "Command");<xhtml:br/>Worker ao = (Worker) cmdClass.newInstance();<xhtml:br/>ao.checkAccessControl(request);<xhtml:br/>ao.doAction(request);</xhtml:div>
               </Example_Code>
               <Body_Text>Although this is an improvement, it encourages a decentralized approach to access control, which makes it easier for programmers to make access control mistakes. This code also highlights another security problem with using reflection to build a command dispatcher. An attacker can invoke the default constructor for any kind of object. In fact, the attacker is not even constrained to objects that implement the Worker interface; the default constructor for any object in the system can be invoked. If the object does not implement the Worker interface, a ClassCastException will be thrown before the assignment to ao, but if the constructor performs operations that work in the attacker's favor, the damage will already have been done. Although this scenario is relatively benign in simple products, in larger products where complexity grows exponentially it is not unreasonable that an attacker could find a constructor to leverage as part of an attack.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-2331</Reference>
               <Description>Database system allows attackers to bypass sandbox restrictions by using the Reflection APi.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2331</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Unsafe Reflection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not use reflection to increase accessibility of classes, methods, or fields</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="138"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Observed_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Unsafe Reflection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Use of Externally-Controlled Input to Select Classes or Code (aka 'Unsafe Reflection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="476" Name="NULL Pointer Dereference" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.</Description>
         <Extended_Description>NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="754" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="754" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>NULL pointer dereferences are frequently resultant from rarely encountered error conditions, since these are most likely to escape detection during the testing phases.</Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
            <Language Name="Go" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>NPD</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>null deref</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>nil pointer dereference</Term>
               <Description>used for access of nil in Go programs</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Read Memory</Impact>
               <Impact>Modify Memory</Impact>
               <Note>In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-12">
               <Method>Manual Dynamic Analysis</Method>
               <Description>Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.</Description>
            </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>The choice could be made to use a language that is not susceptible to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Check the results of all functions that return a value and verify that the value is non-null before acting upon it.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment. This solution does not handle the use of improperly initialized variables (CWE-665).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>While there are no complete fixes aside from conscientious programming, the following steps will go a long way to ensure that NULL pointer dereferences do not occur.</Intro_Text>
               <Example_Code Nature="Good">
                  <xhtml:div>if (pointer1 != NULL) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>/* make use of pointer1 */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* ... */</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If you are working with a multithreaded or otherwise asynchronous environment, ensure that proper locking APIs are used to lock before the if statement; and unlock when it has finished.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <Intro_Text>This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void host_lookup(char *user_supplied_addr){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>struct hostent *hp;<xhtml:br/>in_addr_t *addr;<xhtml:br/>char hostname[64];<xhtml:br/>in_addr_t inet_addr(const char *cp);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/*routine that ensures user_supplied_addr is in the right format for conversion */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>validate_addr_form(user_supplied_addr);<xhtml:br/>addr = inet_addr(user_supplied_addr);<xhtml:br/>hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);<xhtml:br/>strcpy(hostname, hp-&gt;h_name);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference (CWE-476) would then occur in the call to strcpy().</Body_Text>
               <Body_Text>Note that this code is also vulnerable to a buffer overflow (CWE-119).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following code, the programmer assumes that the system always has a property named "cmd" defined. If an attacker can control the program's environment so that "cmd" is not defined, the program throws a NULL pointer exception when it attempts to call the trim() method.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String cmd = System.getProperty("cmd");<xhtml:br/>cmd = cmd.trim();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-110">
               <Intro_Text>This Android application has registered to handle a URL when sent an intent:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>IntentFilter filter = new IntentFilter("com.example.URLHandler.openURL");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>public class UrlHandlerReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if("com.example.URLHandler.openURL".equals(intent.getAction())) {<xhtml:div style="margin-left:1em;">String URL = intent.getStringExtra("URLToOpen");<xhtml:br/>int length = URL.length();</xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>...</xhtml:i>
                                 <xhtml:br/>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Consider the following example of a typical client server exchange. The HandleRequest function is intended to perform a request and use a defer to close the connection whenever the function returns.</Intro_Text>
               <Example_Code Nature="Bad" Language="Go">
                  <xhtml:div>func HandleRequest(client http.Client, request *http.Request) (*http.Response, error) {
                     <xhtml:div style="margin-left:1em;">
                        response, err := client.Do(request)<xhtml:br/>
                        defer response.Body.Close()<xhtml:br/>
                        if err != nil {
                           <xhtml:div style="margin-left:1em;">
                              return nil, err<xhtml:br/>
                           </xhtml:div>
                        }<xhtml:br/>...<xhtml:br/></xhtml:div>
                     }</xhtml:div>
               </Example_Code>
               <Body_Text>If a user supplies a malformed request or violates the client policy, the Do method can return a nil response and a non-nil err.</Body_Text>
               <Body_Text>This HandleRequest Function evaluates the close before checking the error. A deferred call's arguments are evaluated immediately, so the defer statement panics due to a nil response.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-3274</Reference>
               <Description>race condition causes a table to be corrupted if a timer activates while it is being modified, leading to resultant NULL dereference; also involves locking.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3274</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1912</Reference>
               <Description>large number of packets leads to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1912</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0772</Reference>
               <Description>packet with invalid error status value triggers NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0772</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4895</Reference>
               <Description>Chain: race condition for an argument value, possibly resulting in NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4895</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-29652</Reference>
               <Description>ssh component for Go allows clients to cause a denial of service (nil pointer dereference) against SSH servers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-29652</Link>
            </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2009-2692</Reference>
	     <Description>Chain: Use of an unimplemented network socket operation pointing to an uninitialized handler function (CWE-456) causes a crash because of a null pointer dereference (CWE-476).</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2009-2692</Link>
	   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3547</Reference>
               <Description>Chain: race condition might allow resource to be released before operating on it, leading to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3547</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3620</Reference>
               <Description>Chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3620</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2698</Reference>
               <Description>Chain: IP and UDP layers each track the same value with different mechanisms that can get out of sync, possibly resulting in a NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2698</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2692</Reference>
               <Description>Chain: uninitialized function pointers can be dereferenced allowing code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2692</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0949</Reference>
               <Description>Chain: improper initialization of memory can lead to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0949</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3597</Reference>
               <Description>Chain: game server can access player data structures before initialization has happened leading to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-6078</Reference>
               <Description>Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-6078</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0062</Reference>
               <Description>Chain: a message having an unknown message type may cause a reference to uninitialized memory resulting in a null pointer dereference (CWE-476) or dangling pointer (CWE-825), possibly crashing the system or causing heap corruption.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0062</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5183</Reference>
               <Description>Chain: unchecked return value can lead to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5183</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0079</Reference>
               <Description>SSL software allows remote attackers to cause a denial of service (crash) via a crafted SSL/TLS handshake that triggers a null dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0079</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0365</Reference>
               <Description>Network monitor allows remote attackers to cause a denial of service (crash) via a malformed RADIUS packet that triggers a null dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0365</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1013</Reference>
               <Description>Network monitor allows remote attackers to cause a denial of service (crash) via a malformed Q.931, which triggers a null dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1013</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1000</Reference>
               <Description>Chat client allows remote attackers to cause a denial of service (crash) via a passive DCC request with an invalid ID number, which causes a null dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1000</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0389</Reference>
               <Description>Server allows remote attackers to cause a denial of service (crash) via malformed requests that trigger a null dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0389</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0119</Reference>
               <Description>OS allows remote attackers to cause a denial of service (crash from null dereference) or execute arbitrary code via a crafted request during authentication protocol selection.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0119</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0458</Reference>
               <Description>Game allows remote attackers to cause a denial of service (server crash) via a missing argument, which triggers a null pointer dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0458</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0401</Reference>
               <Description>Network monitor allows remote attackers to cause a denial of service (crash) or execute arbitrary code via malformed packets that cause a NULL pointer dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0401</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Null Dereference</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Null-pointer dereference</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Null Dereference (Null Pointer Dereference)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Denial of Service</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>EXP34-C</Entry_ID>
               <Entry_Name>Do not dereference null pointers</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP7</Entry_ID>
               <Entry_Name>Faulty Pointer Use</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-1031"/>
            <Reference External_Reference_ID="REF-1032"/>
            <Reference External_Reference_ID="REF-1033"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Other_Notes, Potential_Mitigations, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings, White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Common_Consequences</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Alternate_Terms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="478" Name="Missing Default Case in Multiple Condition Expression" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The code does not have a default case in an expression with multiple conditions, such as a switch statement.</Description>
         <Extended_Description>If a multiple-condition expression (such as a switch in C) omits the default case but does not consider or handle all possible values that could occur, then this might lead to complex logical errors and resultant weaknesses. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1023" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
            <Language Name="Python" Prevalence="Undetermined"/>
            <Language Name="JavaScript" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Note>Depending on the logical circumstances involved, any consequences may result: e.g., issues of confidentiality, authentication, authorization, availability, integrity, accountability, or non-repudiation.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following does not properly check the return code in the case where the security_check function returns a -1 value when an error occurs. If an attacker can supply data that will invoke an error, the attacker can bypass the security check:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>#define FAILED 0<xhtml:br/>#define PASSED 1<xhtml:br/>int result;<xhtml:br/>...<xhtml:br/>result = security_check(data);<xhtml:br/>switch (result) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>case FAILED:<xhtml:div style="margin-left:1em;">printf("Security check failed!\n");<xhtml:br/>exit(-1);<xhtml:br/>
                              <xhtml:i>//Break never reached because of exit()</xhtml:i>
                              <xhtml:br/>break;</xhtml:div>
                           <xhtml:br/>case PASSED:<xhtml:div style="margin-left:1em;">printf("Security check passed.\n");<xhtml:br/>break;</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:i>// program execution continues...</xhtml:i>
                     <xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Instead a default label should be used for unaccounted conditions:</Body_Text>
               <Example_Code Nature="Good" Language="C">
                  <xhtml:div>#define FAILED 0<xhtml:br/>#define PASSED 1<xhtml:br/>int result;<xhtml:br/>...<xhtml:br/>result = security_check(data);<xhtml:br/>switch (result) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>case FAILED:<xhtml:div style="margin-left:1em;">printf("Security check failed!\n");<xhtml:br/>exit(-1);<xhtml:br/>
                              <xhtml:i>//Break never reached because of exit()</xhtml:i>
                              <xhtml:br/>break;</xhtml:div>
                           <xhtml:br/>case PASSED:<xhtml:div style="margin-left:1em;">printf("Security check passed.\n");<xhtml:br/>break;</xhtml:div>
                           <xhtml:br/>default:<xhtml:div style="margin-left:1em;">printf("Unknown error (%d), exiting...\n",result);<xhtml:br/>exit(-1);</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This label is used because the assumption cannot be made that all possible cases are accounted for. A good practice is to reserve the default case for error handling.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the method getInterestRate retrieves the interest rate for the number of points for a mortgage. The number of points is provided within the input parameter and a switch statement will set the interest rate value to be returned based on the number of points.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public static final String INTEREST_RATE_AT_ZERO_POINTS = "5.00";<xhtml:br/>public static final String INTEREST_RATE_AT_ONE_POINTS = "4.75";<xhtml:br/>public static final String INTEREST_RATE_AT_TWO_POINTS = "4.50";<xhtml:br/>...<xhtml:br/>public BigDecimal getInterestRate(int points) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>BigDecimal result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);<xhtml:br/>
                           <xhtml:br/>switch (points) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>case 0:<xhtml:div style="margin-left:1em;">result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);<xhtml:br/>break;</xhtml:div>
                                 <xhtml:br/>case 1:<xhtml:div style="margin-left:1em;">result = new BigDecimal(INTEREST_RATE_AT_ONE_POINTS);<xhtml:br/>break;</xhtml:div>
                                 <xhtml:br/>case 2:<xhtml:div style="margin-left:1em;">result = new BigDecimal(INTEREST_RATE_AT_TWO_POINTS);<xhtml:br/>break;</xhtml:div>
                              </xhtml:div>
                           </xhtml:div>}<xhtml:br/>return result;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, this code assumes that the value of the points input parameter will always be 0, 1 or 2 and does not check for other incorrect values passed to the method. This can be easily accomplished by providing a default label in the switch statement that outputs an error message indicating an invalid value for the points input parameter and returning a null value.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public static final String INTEREST_RATE_AT_ZERO_POINTS = "5.00";<xhtml:br/>public static final String INTEREST_RATE_AT_ONE_POINTS = "4.75";<xhtml:br/>public static final String INTEREST_RATE_AT_TWO_POINTS = "4.50";<xhtml:br/>...<xhtml:br/>public BigDecimal getInterestRate(int points) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>BigDecimal result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);<xhtml:br/>
                           <xhtml:br/>switch (points) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>case 0:<xhtml:div style="margin-left:1em;">result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);<xhtml:br/>break;</xhtml:div>
                                 <xhtml:br/>case 1:<xhtml:div style="margin-left:1em;">result = new BigDecimal(INTEREST_RATE_AT_ONE_POINTS);<xhtml:br/>break;</xhtml:div>
                                 <xhtml:br/>case 2:<xhtml:div style="margin-left:1em;">result = new BigDecimal(INTEREST_RATE_AT_TWO_POINTS);<xhtml:br/>break;</xhtml:div>
                                 <xhtml:br/>default:<xhtml:div style="margin-left:1em;">System.err.println("Invalid value for points, must be 0, 1 or 2");<xhtml:br/>System.err.println("Returning null value for interest rate");<xhtml:br/>result = null;</xhtml:div>
                              </xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:br/>return result;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following Python example the match-case statements (available in Python version 3.10 and later) perform actions based on the result of the process_data() function. The expected return is either 0 or 1. However, if an unexpected result (e.g., -1 or 2) is obtained then no actions will be taken potentially leading to an unexpected program state.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>result = process_data(data)
                  <xhtml:br/>match result:
                  <xhtml:div style="margin-left:1em;">case 0:
                     <xhtml:div style="margin-left:1em;">print("Properly handle zero case.")</xhtml:div>
                  <xhtml:br/>case 1:
                     <xhtml:div style="margin-left:1em;">print("Properly handle one case.")</xhtml:div>
                  </xhtml:div>
                  <xhtml:br/># program execution continues...</xhtml:div>
               </Example_Code>
               <Body_Text>The recommended approach is to add a default case that captures any unexpected result conditions, regardless of how improbable these unexpected conditions might be, and properly handles them.</Body_Text>
               <Example_Code Nature="Good" Language="Python">
                  <xhtml:div>result = process_data(data)
                  <xhtml:br/>match result:
                  <xhtml:div style="margin-left:1em;">case 0:
                     <xhtml:div style="margin-left:1em;">print("Properly handle zero case.")</xhtml:div>
                  <xhtml:br/>case 1:
                     <xhtml:div style="margin-left:1em;">print("Properly handle one case.")</xhtml:div>
                  <xhtml:br/>case _:
                     <xhtml:div style="margin-left:1em;">print("Properly handle unexpected condition.")</xhtml:div>
                  </xhtml:div>
                  <xhtml:br/># program execution continues...</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following JavaScript example the switch-case statements (available in JavaScript version 1.2 and later) are used to process a given step based on the result of a calcuation involving two inputs. The expected return is either 1, 2, or 3. However, if an unexpected result (e.g., 4) is obtained then no action will be taken potentially leading to an unexpected program state.</Intro_Text>
               <Example_Code Nature="Bad" Language="JavaScript">
                  <xhtml:div>let step = input1 + input2;
                  <xhtml:br/>switch(step) {
                  <xhtml:div style="margin-left:1em;">case 1:
                     <xhtml:div style="margin-left:1em;">alert("Process step 1.");
                     <xhtml:br/>break;</xhtml:div>
                  <xhtml:br/>case 2:
                     <xhtml:div style="margin-left:1em;">alert("Process step 2.");
                     <xhtml:br/>break;</xhtml:div>
                  <xhtml:br/>case 3:
                     <xhtml:div style="margin-left:1em;">alert("Process step 3.");
                     <xhtml:br/>break;</xhtml:div>
                  </xhtml:div>
                  <xhtml:br/>}
                  <xhtml:br/>// program execution continues...</xhtml:div>
               </Example_Code>
               <Body_Text>The recommended approach is to add a default case that captures any unexpected result conditions and properly handles them.</Body_Text>
               <Example_Code Nature="Good" Language="JavaScript">
                  <xhtml:div>let step = input1 + input2;
                  <xhtml:br/>switch(step) {
                  <xhtml:div style="margin-left:1em;">case 1:
                     <xhtml:div style="margin-left:1em;">alert("Process step 1.");
                     <xhtml:br/>break;</xhtml:div>
                  <xhtml:br/>case 2:
                     <xhtml:div style="margin-left:1em;">alert("Process step 2.");
                     <xhtml:br/>break;</xhtml:div>
                  <xhtml:br/>case 3:
                     <xhtml:div style="margin-left:1em;">alert("Process step 3.");
                     <xhtml:br/>break;</xhtml:div>
                  <xhtml:br/>default:
                     <xhtml:div style="margin-left:1em;">alert("Unexpected step encountered.");</xhtml:div>
                  </xhtml:div>
                  <xhtml:br/>}
                  <xhtml:br/>// program execution continues...</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-152">
              <Intro_Text>The Finite State Machine (FSM) shown in the "bad" code snippet below assigns the output ("out") based on the value of state, which is determined based on the user provided input ("user_input").</Intro_Text>
              <Example_Code Nature="Bad" Language="Verilog">
                <xhtml:div>module fsm_1(out, user_input, clk, rst_n);
                <xhtml:br/>input [2:0] user_input; 
                <xhtml:br/>input clk, rst_n;
                <xhtml:br/>output reg [2:0] out;
                <xhtml:br/>reg [1:0] state;
                <xhtml:br/>always @ (posedge clk or negedge rst_n )
                <xhtml:br/>
                <xhtml:div style="margin-left:1em;">begin
                <xhtml:br/>
                <xhtml:div style="margin-left:1em;">
				  if (!rst_n)<xhtml:br/>
				  <xhtml:div style="margin-left:1em;">
					state = 3'h0;
				  </xhtml:div>
                  else<xhtml:br/>
				  case (user_input)
                  <xhtml:div style="margin-left:1em;">
					3'h0:<xhtml:br/>
					3'h1:<xhtml:br/>
					3'h2:<xhtml:br/>
					3'h3: state = 2'h3;<xhtml:br/>
					3'h4: state = 2'h2;<xhtml:br/>
					3'h5: state = 2'h1;<xhtml:br/>
                  </xhtml:div>
                endcase
                </xhtml:div>
                end<xhtml:br/>
                out &lt;= {1'h1, state};<xhtml:br/>
                </xhtml:div>
                endmodule
                </xhtml:div>
              </Example_Code>
              <Body_Text>
                <xhtml:p>The case statement does not include a default to handle the scenario when the user provides inputs of 3'h6 and 3'h7.  Those inputs push the system to an undefined state and might cause a crash (denial of service) or any other unanticipated outcome.</xhtml:p>
                <xhtml:p>Adding a default statement to handle undefined inputs mitigates this issue.  This is shown in the "Good" code snippet below.  The default statement is in bold.</xhtml:p>
              </Body_Text>
              <Example_Code Nature="Good" Language="Verilog">
                <xhtml:div>case (user_input)
                <xhtml:br/><xhtml:div style="margin-left:1em;">3'h0:
                <xhtml:br/>3'h1:
                <xhtml:br/>3'h2:
                <xhtml:br/>3'h3: state = 2'h3;
                <xhtml:br/>3'h4: state = 2'h2;
                <xhtml:br/>3'h5: state = 2'h1;
                <xhtml:br/><xhtml:b>default: state = 2'h0;</xhtml:b>
              </xhtml:div>
                endcase</xhtml:div>
              </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to account for default case in switch</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP4</Entry_ID>
               <Entry_Name>Unchecked Status Condition</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 7, &#34;Switch Statements&#34;, Page 337"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>Drew Buttner</Contribution_Name>
               <Contribution_Date>2022-08-15</Contribution_Date>
               <Contribution_Comment>Suggested name change and other modifications, including a new demonstrative example.</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2008-04-11">Failure to Account for Default Case in Switch</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Use Default Case in Switch</Previous_Entry_Name>
			<Previous_Entry_Name Date="2022-10-13">Missing Default Case in Switch Statement</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="481" Name="Assigning instead of Comparing" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The code uses an operator for assignment when the intention was to perform a comparison.</Description>
         <Extended_Description>In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="480" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="697" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Many IDEs and static analysis products will detect this problem.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Place constants on the left. If one attempts to assign a constant with a variable, the compiler will produce an error.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-140">
               <Intro_Text>The following C/C++ and C# examples attempt to validate an int input parameter against the integer value 100.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int isValid(int value) {<xhtml:div style="margin-left:1em;">if (value=100) {<xhtml:div style="margin-left:1em;">printf("Value is valid\n");<xhtml:br/>return(1);</xhtml:div>}<xhtml:br/>printf("Value is not valid\n");<xhtml:br/>return(0);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>bool isValid(int value) {<xhtml:div style="margin-left:1em;">if (value=100) {<xhtml:div style="margin-left:1em;">Console.WriteLine("Value is valid.");<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>Console.WriteLine("Value is not valid.");<xhtml:br/>return false;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the expression to be evaluated in the if statement uses the assignment operator "=" rather than the comparison operator "==". The result of using the assignment operator instead of the comparison operator causes the int variable to be reassigned locally and the expression in the if statement will always evaluate to the value on the right hand side of the expression. This will result in the input value not being properly validated, which can cause unexpected results.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In this example, we show how assigning instead of comparing can impact code when values are being passed by reference instead of by value. Consider a scenario in which a string is being processed from user input. Assume the string has already been formatted such that different user inputs are concatenated with the colon character. When the processString function is called, the test for the colon character will result in an insertion of the colon character instead, adding new input separators. Since the string was passed by reference, the data sentinels will be inserted in the original string (CWE-464), and further processing of the inputs will be altered, possibly malformed..</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void processString (char *str) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>int i;<xhtml:br/>
                           <xhtml:br/>for(i=0; i&lt;strlen(str); i++) {<xhtml:div style="margin-left:1em;">if (isalnum(str[i])){<xhtml:div style="margin-left:1em;">processChar(str[i]);</xhtml:div>}<xhtml:br/>else if (str[i] = ':') {<xhtml:div style="margin-left:1em;">movingToNewInput();}</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following Java example attempts to perform some processing based on the boolean value of the input parameter. However, the expression to be evaluated in the if statement uses the assignment operator "=" rather than the comparison operator "==". As with the previous examples, the variable will be reassigned locally and the expression in the if statement will evaluate to true and unintended processing may occur.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public void checkValid(boolean isValid) {<xhtml:div style="margin-left:1em;">if (isValid = true) {<xhtml:div style="margin-left:1em;">System.out.println("Performing processing");<xhtml:br/>doSomethingImportant();</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">System.out.println("Not Valid, do not perform processing");<xhtml:br/>return;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While most Java compilers will catch the use of an assignment operator when a comparison operator is required, for boolean variables in Java the use of the assignment operator within an expression is allowed. If possible, try to avoid using comparison operators on boolean variables in java. Instead, let the values of the variables stand for themselves, as in the following code.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public void checkValid(boolean isValid) {<xhtml:div style="margin-left:1em;">if (isValid) {<xhtml:div style="margin-left:1em;">System.out.println("Performing processing");<xhtml:br/>doSomethingImportant();</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">System.out.println("Not Valid, do not perform processing");<xhtml:br/>return;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Alternatively, to test for false, just use the boolean NOT operator.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public void checkValid(boolean isValid) {<xhtml:div style="margin-left:1em;">if (!isValid) {<xhtml:div style="margin-left:1em;">System.out.println("Not Valid, do not perform processing");<xhtml:br/>return;</xhtml:div>}<xhtml:br/>System.out.println("Performing processing");<xhtml:br/>doSomethingImportant();</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void called(int foo){<xhtml:div style="margin-left:1em;">if (foo=1) printf("foo\n");</xhtml:div>}<xhtml:br/>int main() {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>called(2);<xhtml:br/>return 0;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Assigning instead of comparing</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP1</Entry_ID>
               <Entry_Name>Glitch in computation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>EXP45-C</Entry_ID>
               <Entry_Name>Do not perform assignments in selection statements</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 6, &#34;Typos&#34;, Page 289"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="484" Name="Omitted Break Statement in Switch" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.</Description>
         <Extended_Description>This can lead to critical code executing in situations where it should not.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="670" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Note>This weakness can cause unintended logic to be executed and other unexpected application behavior.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>White Box</Method>
               <Description>Omission of a break statement might be intentional, in order to support fallthrough. Automated detection methods might therefore be erroneous. Semantic understanding of expected product behavior is required to interpret whether the code is correct.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Since this weakness is associated with a code construct, it would be indistinguishable from other errors that produce the same behavior.</Description>
            </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In both of these examples, a message is printed based on the month passed into the function:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public void printMessage(int month){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>switch (month) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>case 1: print("January");<xhtml:br/>case 2: print("February");<xhtml:br/>case 3: print("March");<xhtml:br/>case 4: print("April");<xhtml:br/>case 5: print("May");<xhtml:br/>case 6: print("June");<xhtml:br/>case 7: print("July");<xhtml:br/>case 8: print("August");<xhtml:br/>case 9: print("September");<xhtml:br/>case 10: print("October");<xhtml:br/>case 11: print("November");<xhtml:br/>case 12: print("December");</xhtml:div>
                           </xhtml:div>}<xhtml:br/>println(" is a great month");</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void printMessage(int month){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>switch (month) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>case 1: printf("January");<xhtml:br/>case 2: printf("February");<xhtml:br/>case 3: printf("March");<xhtml:br/>case 4: printf("April");<xhtml:br/>case 5: printff("May");<xhtml:br/>case 6: printf("June");<xhtml:br/>case 7: printf("July");<xhtml:br/>case 8: printf("August");<xhtml:br/>case 9: printf("September");<xhtml:br/>case 10: printf("October");<xhtml:br/>case 11: printf("November");<xhtml:br/>case 12: printf("December");</xhtml:div>
                           </xhtml:div>}<xhtml:br/>printf(" is a great month");</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Both examples do not use a break statement after each case, which leads to unintended fall-through behavior. For example, calling "printMessage(10)" will result in the text "OctoberNovemberDecember is a great month" being printed.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Omitted break statement</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP4</Entry_ID>
               <Entry_Name>Unchecked Status Condition</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 7, &#34;Switch Statements&#34;, Page 337"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Detection_Factors, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Detection_Factors, Name, Other_Notes, Potential_Mitigations, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Detection_Factors</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-11-24">Omitted Break Statement</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="486" Name="Comparison of Classes by Name" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.</Description>
         <Extended_Description>If the decision to trust the methods and data of an object is based on the name of a class, it is possible for malicious users to send objects of the same name as trusted classes and thereby gain the trust afforded to known classes and types.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1025" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>If a product relies solely on the name of an object to determine identity, it may execute the incorrect or unintended code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In this example, the expression in the if statement compares the class of the inputClass object to a trusted class by comparing the class names.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>if (inputClass.getClass().getName().equals("TrustedClassName")) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// Do something assuming you trust inputClass</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// ...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, multiple classes can have the same name therefore comparing an object's class by name can allow untrusted classes of the same name as the trusted class to be use to execute unintended or incorrect code. To compare the class of an object to the intended class the getClass() method and the comparison operator "==" should be used to ensure the correct trusted class is used, as shown in the following example.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>if (inputClass.getClass() == TrustedClass.class) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// Do something assuming you trust inputClass</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// ...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In this example, the Java class, TrustedClass, overrides the equals method of the parent class Object to determine equivalence of objects of the class. The overridden equals method first determines if the object, obj, is the same class as the TrustedClass object and then compares the object's fields to determine if the objects are equivalent.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class TrustedClass {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>@Override<xhtml:br/>public boolean equals(Object obj) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>boolean isEquals = false;<xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// first check to see if the object is of the same class</xhtml:i>
                                 <xhtml:br/>if (obj.getClass().getName().equals(this.getClass().getName())) {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// then compare object fields</xhtml:i>
                                       <xhtml:br/>...<xhtml:br/>if (...) {<xhtml:div style="margin-left:1em;">isEquals = true;</xhtml:div>}</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>
                                 <xhtml:br/>return isEquals;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the equals method compares the class names of the object, obj, and the TrustedClass object to determine if they are the same class. As with the previous example using the name of the class to compare the class of objects can lead to the execution of unintended or incorrect code if the object passed to the equals method is of another class with the same name. To compare the class of an object to the intended class, the getClass() method and the comparison operator "==" should be used to ensure the correct trusted class is used, as shown in the following example.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public boolean equals(Object obj) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// first check to see if the object is of the same class</xhtml:i>
                           <xhtml:br/>if (obj.getClass() == this.getClass()) {<xhtml:div style="margin-left:1em;">...</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Comparing Classes by Name</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Comparing classes by name</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>OBJ09-J</Entry_ID>
               <Entry_Name>Compare classes and not class names</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP1</Entry_ID>
               <Entry_Name>Glitch in computation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Relationships, Other_Notes, Relevant_Properties, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships, Relevant_Properties</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Comparing Classes by Name</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="487" Name="Reliance on Package-level Scope" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.</Description>
         <Extended_Description>The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Any data in a Java package can be accessed outside of the Java framework if the package is distributed.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>The data in a Java class can be modified by anyone outside of the Java framework if the packages is distributed.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>package math;<xhtml:br/>public class Lebesgue implements Integration{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public final Static String youAreHidingThisFunction(functionToIntegrate){<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>return ...;</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Relying on package-level scope</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MET04-J</Entry_ID>
               <Entry_Name>Do not increase the accessibility of overridden or hidden methods</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Relying on Package-level Scope</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="491" Name="Public cloneable() Method Without Final ('Object Hijack')" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Unexpected State</Impact>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Make the cloneable() method final.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In this example, a public class "BankAccount" implements the cloneable() method which declares "Object clone(string accountnumber)":</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class BankAccount implements Cloneable{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public Object clone(String accountnumber) throws<xhtml:br/>CloneNotSupportedException<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                              <xhtml:div>Object returnMe = new BankAccount(account number);<xhtml:br/>...<xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the example below, a clone() method is defined without being declared final.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>protected Object clone() throws CloneNotSupportedException {<xhtml:div style="margin-left:1em;">...</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Mobile Code: Object Hijack</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>OBJ07-J</Entry_ID>
               <Entry_Name>Sensitive classes must not let themselves be copied</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP28</Entry_ID>
               <Entry_Name>Unexpected access points</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-453"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated References, Demonstrative_Example, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Mobile Code: Object Hijack</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Public cloneable() Method Without Final (aka 'Object Hijack')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="492" Name="Use of Inner Class Containing Sensitive Data" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.</Description>
         <Extended_Description>Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in its enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>"Inner Classes" data confidentiality aspects can often be overcome.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following Java Applet code mistakenly makes use of an inner class.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public final class urlTool extends Applet {<xhtml:div style="margin-left:1em;">private final class urlHelper {<xhtml:div style="margin-left:1em;">...</xhtml:div>}<xhtml:br/>...</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a basic use of inner classes. The class OuterClass contains the private member inner class InnerClass. The private inner class InnerClass includes the method concat that accesses the private member variables of the class OuterClass to output the value of one of the private member variables of the class OuterClass and returns a string that is a concatenation of one of the private member variables of the class OuterClass, the separator input parameter of the method and the private member variable of the class InnerClass.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class OuterClass {<xhtml:div style="margin-left:1em;">
                        <xhtml:i>// private member variables of OuterClass</xhtml:i>
                        <xhtml:br/>private String memberOne;<xhtml:br/>private String memberTwo;<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i>// constructor of OuterClass</xhtml:i>
                        <xhtml:br/>public OuterClass(String varOne, String varTwo) {<xhtml:div style="margin-left:1em;">this.memberOne = varOne;<xhtml:br/>this.memberTwo = varTwo;</xhtml:div>}<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i>// InnerClass is a member inner class of OuterClass</xhtml:i>
                        <xhtml:br/>private class InnerClass {<xhtml:div style="margin-left:1em;">private String innerMemberOne;<xhtml:br/>
                           <xhtml:br/>public InnerClass(String innerVarOne) {<xhtml:div style="margin-left:1em;">this.innerMemberOne = innerVarOne;</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public String concat(String separator) {<xhtml:div style="margin-left:1em;">
                              <xhtml:i>// InnerClass has access to private member variables of OuterClass</xhtml:i>
                              <xhtml:br/>System.out.println("Value of memberOne is: " + memberOne);<xhtml:br/>return OuterClass.this.memberTwo + separator + this.innerMemberOne;</xhtml:div>}</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Although this is an acceptable use of inner classes it demonstrates one of the weaknesses of inner classes that inner classes have complete access to all member variables and methods of the enclosing class even those that are declared private and protected. When inner classes are compiled and translated into Java bytecode the JVM treats the inner class as a peer class with package level access to the enclosing class.</Body_Text>
               <Body_Text>To avoid this weakness of inner classes, consider using either static inner classes, local inner classes, or anonymous inner classes.</Body_Text>
               <Body_Text>The following Java example demonstrates the use of static inner classes using the previous example. The inner class InnerClass is declared using the static modifier that signifies that InnerClass is a static member of the enclosing class OuterClass. By declaring an inner class as a static member of the enclosing class, the inner class can only access other static members and methods of the enclosing class and prevents the inner class from accessing nonstatic member variables and methods of the enclosing class. In this case the inner class InnerClass can only access the static member variable memberTwo of the enclosing class OuterClass but cannot access the nonstatic member variable memberOne.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public class OuterClass {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// private member variables of OuterClass</xhtml:i>
                           <xhtml:br/>private String memberOne;<xhtml:br/>private static String memberTwo;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// constructor of OuterClass</xhtml:i>
                           <xhtml:br/>public OuterClass(String varOne, String varTwo) {<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">this.memberOne = varOne;<xhtml:br/>this.memberTwo = varTwo;</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// InnerClass is a static inner class of OuterClass</xhtml:i>
                           <xhtml:br/>private static class InnerClass {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>private String innerMemberOne;<xhtml:br/>
                                 <xhtml:br/>public InnerClass(String innerVarOne) {<xhtml:div style="margin-left:1em;">this.innerMemberOne = innerVarOne;</xhtml:div>}<xhtml:br/>public String concat(String separator) {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:i>// InnerClass only has access to static member variables of OuterClass</xhtml:i>
                                       <xhtml:br/>return memberTwo + separator + this.innerMemberOne;</xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The only limitation with using a static inner class is that as a static member of the enclosing class the inner class does not have a reference to instances of the enclosing class. For many situations this may not be ideal. An alternative is to use a local inner class or an anonymous inner class as shown in the next examples.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following example the BankAccount class contains the private member inner class InterestAdder that adds interest to the bank account balance. The start method of the BankAccount class creates an object of the inner class InterestAdder, the InterestAdder inner class implements the ActionListener interface with the method actionPerformed. A Timer object created within the start method of the BankAccount class invokes the actionPerformed method of the InterestAdder class every 30 days to add the interest to the bank account balance based on the interest rate passed to the start method as an input parameter. The inner class InterestAdder needs access to the private member variable balance of the BankAccount class in order to add the interest to the bank account balance.</Intro_Text>
               <Body_Text>However as demonstrated in the previous example, because InterestAdder is a non-static member inner class of the BankAccount class, InterestAdder also has access to the private member variables of the BankAccount class - including the sensitive data contained in the private member variables for the bank account owner's name, Social Security number, and the bank account number.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class BankAccount {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// private member variables of BankAccount class</xhtml:i>
                           <xhtml:br/>private String accountOwnerName;<xhtml:br/>private String accountOwnerSSN;<xhtml:br/>private int accountNumber;<xhtml:br/>private double balance;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// constructor for BankAccount class</xhtml:i>
                           <xhtml:br/>public BankAccount(String accountOwnerName, String accountOwnerSSN,<xhtml:br/>int accountNumber, double initialBalance, int initialRate)<xhtml:br/>{<xhtml:div style="margin-left:1em;">this.accountOwnerName = accountOwnerName;<xhtml:br/>this.accountOwnerSSN = accountOwnerSSN;<xhtml:br/>this.accountNumber = accountNumber;<xhtml:br/>this.balance = initialBalance;<xhtml:br/>this.start(initialRate);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// start method will add interest to balance every 30 days</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// creates timer object and interest adding action listener object</xhtml:i>
                           <xhtml:br/>public void start(double rate)<xhtml:br/>{<xhtml:div style="margin-left:1em;">ActionListener adder = new InterestAdder(rate);<xhtml:br/>Timer t = new Timer(1000 * 3600 * 24 * 30, adder);<xhtml:br/>t.start();</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// InterestAdder is an inner class of BankAccount class</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// that implements the ActionListener interface</xhtml:i>
                           <xhtml:br/>private class InterestAdder implements ActionListener<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                              <xhtml:div>private double rate;<xhtml:br/>
                                 <xhtml:br/>public InterestAdder(double aRate)<xhtml:br/>{<xhtml:div style="margin-left:1em;">this.rate = aRate;</xhtml:div>}<xhtml:br/>
                                 <xhtml:br/>public void actionPerformed(ActionEvent event)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:i>// update interest</xhtml:i>
                                       <xhtml:br/>double interest = BankAccount.this.balance * rate / 100;<xhtml:br/>BankAccount.this.balance += interest;</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>In the following example the InterestAdder class from the above example is declared locally within the start method of the BankAccount class. As a local inner class InterestAdder has its scope restricted to the method (or enclosing block) where it is declared, in this case only the start method has access to the inner class InterestAdder, no other classes including the enclosing class has knowledge of the inner class outside of the start method. This allows the inner class to access private member variables of the enclosing class but only within the scope of the enclosing method or block.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public class BankAccount {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// private member variables of BankAccount class</xhtml:i>
                           <xhtml:br/>private String accountOwnerName;<xhtml:br/>private String accountOwnerSSN;<xhtml:br/>private int accountNumber;<xhtml:br/>private double balance;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// constructor for BankAccount class</xhtml:i>
                           <xhtml:br/>public BankAccount(String accountOwnerName, String accountOwnerSSN,<xhtml:br/>int accountNumber, double initialBalance, int initialRate)<xhtml:br/>{<xhtml:div style="margin-left:1em;">this.accountOwnerName = accountOwnerName;<xhtml:br/>this.accountOwnerSSN = accountOwnerSSN;<xhtml:br/>this.accountNumber = accountNumber;<xhtml:br/>this.balance = initialBalance;<xhtml:br/>this.start(initialRate);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// start method will add interest to balance every 30 days</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// creates timer object and interest adding action listener object</xhtml:i>
                           <xhtml:br/>public void start(final double rate)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>// InterestAdder is a local inner class</xhtml:i>
                                 <xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// that implements the ActionListener interface</xhtml:i>
                                 <xhtml:br/>class InterestAdder implements ActionListener<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>public void actionPerformed(ActionEvent event)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>
                                             <xhtml:i>// update interest</xhtml:i>
                                             <xhtml:br/>double interest = BankAccount.this.balance * rate / 100;<xhtml:br/>BankAccount.this.balance += interest;</xhtml:div>
                                       </xhtml:div>}</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>ActionListener adder = new InterestAdder();<xhtml:br/>Timer t = new Timer(1000 * 3600 * 24 * 30, adder);<xhtml:br/>t.start();</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>A similar approach would be to use an anonymous inner class as demonstrated in the next example. An anonymous inner class is declared without a name and creates only a single instance of the inner class object. As in the previous example the anonymous inner class has its scope restricted to the start method of the BankAccount class.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public class BankAccount {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// private member variables of BankAccount class</xhtml:i>
                           <xhtml:br/>private String accountOwnerName;<xhtml:br/>private String accountOwnerSSN;<xhtml:br/>private int accountNumber;<xhtml:br/>private double balance;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// constructor for BankAccount class</xhtml:i>
                           <xhtml:br/>public BankAccount(String accountOwnerName, String accountOwnerSSN,<xhtml:br/>int accountNumber, double initialBalance, int initialRate)<xhtml:br/>{<xhtml:div style="margin-left:1em;">this.accountOwnerName = accountOwnerName;<xhtml:br/>this.accountOwnerSSN = accountOwnerSSN;<xhtml:br/>this.accountNumber = accountNumber;<xhtml:br/>this.balance = initialBalance;<xhtml:br/>this.start(initialRate);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// start method will add interest to balance every 30 days</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// creates timer object and interest adding action listener object</xhtml:i>
                           <xhtml:br/>public void start(final double rate)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>// anonymous inner class that implements the ActionListener interface</xhtml:i>
                                 <xhtml:br/>ActionListener adder = new ActionListener()<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>public void actionPerformed(ActionEvent event)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>
                                             <xhtml:br/>
                                             double interest = BankAccount.this.balance * rate / 100;
                                             <xhtml:br/>BankAccount.this.balance += interest;</xhtml:div>
                                       </xhtml:div>}</xhtml:div>
                                 </xhtml:div>};<xhtml:br/>
                                 <xhtml:br/>Timer t = new Timer(1000 * 3600 * 24 * 30, adder);<xhtml:br/>t.start();</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example a simple applet provides the capability for a user to input a URL into a text field and have the URL opened in a new browser window. The applet contains an inner class that is an action listener for the submit button, when the user clicks the submit button the inner class action listener's actionPerformed method will open the URL entered into the text field in a new browser window. As with the previous examples using inner classes in this manner creates a security risk by exposing private variables and methods. Inner classes create an additional security risk with applets as applets are executed on a remote machine through a web browser within the same JVM and therefore may run side-by-side with other potentially malicious code.</Intro_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>public class UrlToolApplet extends Applet {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// private member variables for applet components</xhtml:i>
                           <xhtml:br/>private Label enterUrlLabel;<xhtml:br/>private TextField enterUrlTextField;<xhtml:br/>private Button submitButton;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// init method that adds components to applet</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// and creates button listener object</xhtml:i>
                           <xhtml:br/>public void init() {<xhtml:div style="margin-left:1em;">setLayout(new FlowLayout());<xhtml:br/>enterUrlLabel = new Label("Enter URL: ");<xhtml:br/>enterUrlTextField = new TextField("", 20);<xhtml:br/>submitButton = new Button("Submit");<xhtml:br/>add(enterUrlLabel);<xhtml:br/>add(enterUrlTextField);<xhtml:br/>add(submitButton);<xhtml:br/>ActionListener submitButtonListener = new SubmitButtonListener();<xhtml:br/>submitButton.addActionListener(submitButtonListener);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// button listener inner class for UrlToolApplet class</xhtml:i>
                           <xhtml:br/>private class SubmitButtonListener implements ActionListener {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>public void actionPerformed(ActionEvent evt) {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>if (evt.getSource() == submitButton) {<xhtml:div style="margin-left:1em;">String urlString = enterUrlTextField.getText();<xhtml:br/>URL url = null;<xhtml:br/>try {<xhtml:div style="margin-left:1em;">url = new URL(urlString);</xhtml:div>} catch (MalformedURLException e) {<xhtml:div style="margin-left:1em;">System.err.println("Malformed URL: " + urlString);</xhtml:div>}<xhtml:br/>if (url != null) {<xhtml:div style="margin-left:1em;">getAppletContext().showDocument(url);</xhtml:div>}</xhtml:div>}</xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>As with the previous examples a solution to this problem would be to use a static inner class, a local inner class or an anonymous inner class. An alternative solution would be to have the applet implement the action listener rather than using it as an inner class as shown in the following example.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public class UrlToolApplet extends Applet implements ActionListener {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// private member variables for applet components</xhtml:i>
                           <xhtml:br/>private Label enterUrlLabel;<xhtml:br/>private TextField enterUrlTextField;<xhtml:br/>private Button submitButton;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// init method that adds components to applet</xhtml:i>
                           <xhtml:br/>public void init() {<xhtml:div style="margin-left:1em;">setLayout(new FlowLayout());<xhtml:br/>enterUrlLabel = new Label("Enter URL: ");<xhtml:br/>enterUrlTextField = new TextField("", 20);<xhtml:br/>submitButton = new Button("Submit");<xhtml:br/>add(enterUrlLabel);<xhtml:br/>add(enterUrlTextField);<xhtml:br/>add(submitButton);<xhtml:br/>submitButton.addActionListener(this);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// implementation of actionPerformed method of ActionListener interface</xhtml:i>
                           <xhtml:br/>public void actionPerformed(ActionEvent evt) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if (evt.getSource() == submitButton) {<xhtml:div style="margin-left:1em;">String urlString = enterUrlTextField.getText();<xhtml:br/>URL url = null;<xhtml:br/>try {<xhtml:div style="margin-left:1em;">url = new URL(urlString);</xhtml:div>} catch (MalformedURLException e) {<xhtml:div style="margin-left:1em;">System.err.println("Malformed URL: " + urlString);</xhtml:div>}<xhtml:br/>if (url != null) {<xhtml:div style="margin-left:1em;">getAppletContext().showDocument(url);</xhtml:div>}</xhtml:div>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Mobile Code: Use of Inner Class</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Publicizing of private data when using inner classes</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>OBJ08-J</Entry_ID>
               <Entry_Name>Do not expose private members of an outer class from within a nested class</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Other">Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Mobile Code: Use of Inner Class</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="493" Name="Critical Public Variable Without Final Modifier" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.</Description>
         <Extended_Description>If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Mobile code, such as a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.</Background_Detail>
            <Background_Detail>Final provides security by only allowing non-mutable objects to be changed after being set. However, only objects which are not extended can be made final.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>The object could potentially be tampered with.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The object could potentially allow the object to be read.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Suppose this WidgetData class is used for an e-commerce web site. The programmer attempts to prevent price-tampering attacks by setting the price of the widget using the constructor.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public final class WidgetData extends Applet {<xhtml:div style="margin-left:1em;">public float price;<xhtml:br/>...<xhtml:br/>public WidgetData(...) {<xhtml:div style="margin-left:1em;">this.price = LookupPrice("MyWidgetType");</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The price field is not final. Even though the value is set by the constructor, it could be modified by anybody that has access to an instance of WidgetData.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Assume the following code is intended to provide the location of a configuration file that controls execution of the application.</Intro_Text>
               <Example_Code Nature="Bad" Language="C++">
                  <xhtml:div>public string configPath = "/etc/application/config.dat";</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public String configPath = new String("/etc/application/config.dat");</xhtml:div>
               </Example_Code>
               <Body_Text>While this field is readable from any function, and thus might allow an information leak of a pathname, a more serious problem is that it can be changed by any function.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Mobile Code: Non-Final Public Field</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to provide confidentiality for stored data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>OBJ10-J</Entry_ID>
               <Entry_Name>Do not use public static nonfinal variables</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP28</Entry_ID>
               <Entry_Name>Unexpected access points</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Likelihood_of_Exploit, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Background_Details, Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Background_Details, Demonstrative_Examples, Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Mobile Code: Non-final Public Field</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="495" Name="Private Data Structure Returned From A Public Method" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>The contents of the data structure can be modified from outside the intended scope.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Declare the method private.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Clone the member data and keep an unmodified version of the data private to the object.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use public setter methods that govern how a private member can be modified.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Here, a public method in a Java class returns a reference to a private array. Given that arrays in Java are mutable, any modifications made to the returned reference would be reflected in the original private array.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>private String[] colors;<xhtml:br/>public String[] getColors() {<xhtml:div style="margin-left:1em;">return colors;</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In this example, the Color class defines functions that return non-const references to private members (an array type and an integer type), which are then arbitrarily altered from outside the control of the class.</Intro_Text>
               <Example_Code Nature="Bad" Language="C++">
                  <xhtml:div>class Color<xhtml:br/>{<xhtml:div style="margin-left:1em;">private:<xhtml:div style="margin-left:1em;">int[2] colorArray;<xhtml:br/>int colorValue;</xhtml:div>public:<xhtml:div style="margin-left:1em;">Color () : colorArray { 1, 2 }, colorValue (3) { };<xhtml:br/>int[2] &amp; fa () { return colorArray; } <xhtml:i>// return reference to private array</xhtml:i><xhtml:br/>int &amp; fv () { return colorValue; } <xhtml:i>// return reference to private integer</xhtml:i></xhtml:div></xhtml:div>};<xhtml:br/><xhtml:br/>int main ()<xhtml:br/>{<xhtml:div style="margin-left:1em;">Color c;<xhtml:br/><xhtml:br/>c.fa () [1] = 42; <xhtml:i>// modifies private array element</xhtml:i><xhtml:br/>c.fv () = 42; <xhtml:i>// modifies private int</xhtml:i><xhtml:br/><xhtml:br/>return 0;</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Private Array-Typed Field Returned From A Public Method</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships, White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Name, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2019-01-03">Private Array-Typed Field Returned From A Public Method</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="496" Name="Public Data Assigned to Private Array-Typed Field" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Assigning public data to a private array is equivalent to giving public access to the array.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>The contents of the array can be modified from outside the intended scope.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not allow objects to modify private members of a class.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the example below, the setRoles() method assigns a publically-controllable array to a private field, thus allowing the caller to modify the private array directly by virtue of the fact that arrays in Java are mutable.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>private String[] userRoles;<xhtml:br/>public void setUserRoles(String[] userRoles) {<xhtml:div style="margin-left:1em;">this.userRoles = userRoles;</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Public Data Assigned to Private Array-Typed Field</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships, White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="498" Name="Cloneable Class Containing Sensitive Information" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.</Description>
         <Extended_Description>Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="200" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>A class that can be cloned can be produced without executing the constructor. This is dangerous since the constructor may perform security-related checks. By allowing the object to be cloned, those checks may be bypassed.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If you do make your classes clonable, ensure that your clone method is final and throw super.clone().</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class CloneClient {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public CloneClient() //throws<xhtml:br/>java.lang.CloneNotSupportedException {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>Teacher t1 = new Teacher("guddu","22,nagar road");<xhtml:br/>//...<xhtml:br/>// Do some stuff to remove the teacher.<xhtml:br/>Teacher t2 = (Teacher)t1.clone();<xhtml:br/>System.out.println(t2.name);</xhtml:div>
                           </xhtml:div>}<xhtml:br/>public static void main(String args[]) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>new CloneClient();</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>class Teacher implements Cloneable {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>public Object clone() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>try {<xhtml:div style="margin-left:1em;">return super.clone();</xhtml:div>}<xhtml:br/>catch (java.lang.CloneNotSupportedException e) {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>throw new RuntimeException(e.toString());</xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>}<xhtml:br/>public String name;<xhtml:br/>public String clas;<xhtml:br/>public Teacher(String name,String clas) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>this.name = name;<xhtml:br/>this.clas = clas;</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Make classes uncloneable by defining a clone function like:</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public final void clone() throws java.lang.CloneNotSupportedException {<xhtml:div style="margin-left:1em;">throw new java.lang.CloneNotSupportedException();</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Information leak through class cloning</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>OBJ07-J</Entry_ID>
               <Entry_Name>Sensitive classes must not let themselves be copied</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Information Leak through Class Cloning</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="499" Name="Serializable Class Containing Sensitive Data" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.</Description>
         <Extended_Description>Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="200" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>an attacker can write out the class to a byte stream, then extract the important data from it.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Make sure to prevent serialization of your objects.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code creates a new record for a medical patient:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>class PatientRecord {<xhtml:div style="margin-left:1em;">private String name;<xhtml:br/>private String socialSecurityNum;<xhtml:br/>public Patient(String name,String ssn) {<xhtml:div style="margin-left:1em;">this.SetName(name);<xhtml:br/>this.SetSocialSecurityNumber(ssn);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This object does not explicitly deny serialization, allowing an attacker to serialize an instance of this object and gain a patient's name and Social Security number even though those fields are private.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Information leak through serialization</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER03-J</Entry_ID>
               <Entry_Name>Do not serialize unencrypted, sensitive data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER05-J</Entry_ID>
               <Entry_Name>Do not serialize instances of inner classes</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Information Leak through Serialization</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="5" Name="J2EE Misconfiguration: Data Transmission Without Encryption" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="319" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>The product configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>J2EE Misconfiguration: Insecure Transport</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Other">
               <xhtml:p>If an application uses SSL to guarantee confidential communication with client browsers, the application configuration should make it impossible to view any access controlled page without SSL. There are three common ways for SSL to be bypassed:</xhtml:p>
                  <xhtml:ul>
                     <xhtml:li>A user manually enters URL and types "HTTP" rather than "HTTPS".</xhtml:li>
                     <xhtml:li>Attackers intentionally send a user to an insecure URL.</xhtml:li>
                     <xhtml:li>A programmer erroneously creates a relative link to a page in the application, which does not switch from HTTP to HTTPS. (This is particularly easy to do when the link moves between public and secured areas on a web site.)</xhtml:li>
                  </xhtml:ul>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">J2EE Misconfiguration: Insecure Transport</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="500" Name="Public Static Field Not Marked Final" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.</Description>
         <Extended_Description>Public static variables can be read without an accessor and changed without a mutator by any classes in the application.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="493" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>When a field is declared public but not final, the field can be read and written to by arbitrary Java code.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>The object could potentially be tampered with.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The object could potentially allow the object to be read.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Clearly identify the scope for all critical data elements, including whether they should be regarded as static.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Make any static fields private and constant.</xhtml:p>
                  <xhtml:p>A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following examples use of a public static String variable to contain the name of a property/configuration file for the application.</Intro_Text>
               <Example_Code Nature="Bad" Language="C++">
                  <xhtml:div>class SomeAppClass {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>public:<xhtml:div style="margin-left:1em;">static string appPropertiesConfigFile = "app/properties.config";</xhtml:div>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class SomeAppClass {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>public static String appPropertiesFile = "app/Application.properties";<xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Having a public static variable that is not marked final (constant) may allow the variable to the altered in a way not intended by the application. In this example the String variable can be modified to indicate a different on nonexistent properties file which could cause the application to crash or caused unexpected behavior.</Body_Text>
               <Example_Code Nature="Good" Language="C++">
                  <xhtml:div>class SomeAppClass {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>public:<xhtml:div style="margin-left:1em;">static const string appPropertiesConfigFile = "app/properties.config";</xhtml:div>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public class SomeAppClass {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>public static final String appPropertiesFile = "app/Application.properties";<xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Overflow of static internal buffer</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>OBJ10-J</Entry_ID>
               <Entry_Name>Do not use public static nonfinal variables</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP28</Entry_ID>
               <Entry_Name>Unexpected access points</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-05</Modification_Date>
               <Modification_Comment>Significant clarification of this entry, and improved examples.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Background_Details, Demonstrative_Examples, Description, Name, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Overflow of Static Internal Buffer</Previous_Entry_Name>
            <Previous_Entry_Name Date="2008-11-24">Static Field Not Marked Final</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="502" Name="Deserialization of Untrusted Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.</Description>
         <Extended_Description>
            <xhtml:p>It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.</xhtml:p>
            <xhtml:p>Data that is untrusted can not be trusted to be well-formed.</xhtml:p>
            <xhtml:p>When developers place no restrictions on "gadget chains," or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="915" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="Ruby" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Name="Python" Prevalence="Undetermined"/>
            <Language Name="JavaScript" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred ("serialization"), then extracting the serialized data to reconstruct the original object ("deserialization").</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Marshaling, Unmarshaling</Term>
               <Description>Marshaling and unmarshaling are effectively synonyms for serialization and deserialization, respectively.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Pickling, Unpickling</Term>
               <Description>In Python, the "pickle" functionality is used to perform serialization and deserialization.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>PHP Object Injection</Term>
               <Description>Some PHP application researchers use this term when attacking unsafe use of the unserialize() function; but it is also used for CWE-915.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Unexpected State</Impact>
               <Note>Attackers can modify unexpected objects or data that was assumed to be safe from modification.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Note>If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate.</Note>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Note>The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Explicitly define a final object() to prevent deserialization.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Make fields transient to protect them from deserialization.</xhtml:p>
                  <xhtml:p>An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code snippet deserializes an object from a file and uses it as a UI button:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">File file = new File("object.obj");<xhtml:br/>ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));<xhtml:br/>javax.swing.JButton button = (javax.swing.JButton) in.readObject();<xhtml:br/>in.close();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not attempt to verify the source or contents of the file before deserializing it. An attacker may be able to replace the intended file with a file that contains arbitrary malicious code which will be executed when the button is pressed.</Body_Text>
               <Body_Text>To mitigate this, explicitly define final readObject() to prevent deserialization. An example of this is:</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>private final void readObject(ObjectInputStream in) throws java.io.IOException {<xhtml:br/>throw new java.io.IOException("Cannot be deserialized"); }</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In Python, the Pickle library handles the serialization and deserialization processes. In this example derived from [REF-467], the code receives and parses data, and afterwards tries to authenticate a user based on validating a token.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>class ExampleProtocol(protocol.Protocol):<xhtml:br/>def dataReceived(self, data):<xhtml:br/>
                           <xhtml:br/># Code that would be here would parse the incoming data<xhtml:br/># After receiving headers, call confirmAuth() to authenticate<xhtml:br/>
                           <xhtml:br/>def confirmAuth(self, headers):<xhtml:br/>try:<xhtml:br/>token = cPickle.loads(base64.b64decode(headers['AuthToken']))<xhtml:br/>if not check_hmac(token['signature'], token['data'], getSecretKey()):<xhtml:br/>raise AuthFail<xhtml:br/>self.secure_data = token['data']<xhtml:br/>except:<xhtml:br/>raise AuthFail</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Unfortunately, the code does not verify that the incoming data is legitimate. An attacker can construct a illegitimate, serialized object "AuthToken" that instantiates one of Python's subprocesses to execute arbitrary commands. For instance,the attacker could construct a pickle that leverages Python's subprocess module, which spawns new processes and includes a number of arguments for various uses. Since Pickle allows objects to define the process for how they should be unpickled, the attacker can direct the unpickle process to call Popen in the subprocess module and execute /bin/sh.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-12799</Reference>
               <Description>chain: bypass of untrusted deserialization issue (CWE-502) by using an assumed-trusted class (CWE-183)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-12799</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-8103</Reference>
               <Description>Deserialization issue in commonly-used Java library allows remote execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2015-8103</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-4852</Reference>
               <Description>Deserialization issue in commonly-used Java library allows remote execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2015-4852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2013-1465</Reference>
               <Description>Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2013-1465</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3527</Reference>
               <Description>Use of PHP unserialize function on untrusted input in content management system might allow code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-3527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0911</Reference>
               <Description>Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-0911</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0911</Reference>
               <Description>Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-0911</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-2520</Reference>
               <Description>Python script allows local users to execute code via pickled data.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-2520</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-4406</Reference>
               <Description>Unsafe deserialization using pickle in a Python script.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-4406</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0791</Reference>
               <Description>Web browser allows execution of native methods via a crafted string to a JavaScript function that deserializes the string.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0791</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Deserialization of untrusted data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER01-J</Entry_ID>
               <Entry_Name>Do not deviate from the proper signatures of serialization methods</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER03-J</Entry_ID>
               <Entry_Name>Do not serialize unencrypted, sensitive data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER06-J</Entry_ID>
               <Entry_Name>Make defensive copies of private mutable components during deserialization</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER08-J</Entry_ID>
               <Entry_Name>Do not use the default serialized form for implementation defined invariants</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="586"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-461"/>
            <Reference External_Reference_ID="REF-462"/>
            <Reference External_Reference_ID="REF-463"/>
            <Reference External_Reference_ID="REF-464"/>
            <Reference External_Reference_ID="REF-465"/>
            <Reference External_Reference_ID="REF-466"/>
            <Reference External_Reference_ID="REF-467"/>
            <Reference External_Reference_ID="REF-468"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Modes_of_Introduction, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="537" Name="Java Runtime Error Message Containing Sensitive Information" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="211" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not expose sensitive error information to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the class InputFileRead enables an input file to be read using a FileReader object. In the constructor of this class a default input file path is set to some directory on the local file system and the method setInputFile must be called to set the name of the input file to be read in the default directory. The method readInputFile will create the FileReader object and will read the contents of the file. If the method setInputFile is not called prior to calling the method readInputFile then the File object will remain null when initializing the FileReader object. A Java RuntimeException will be raised, and an error message will be output to the user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class InputFileRead {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>private File readFile = null;<xhtml:br/>private FileReader reader = null;<xhtml:br/>private String inputFilePath = null;<xhtml:br/>private final String DEFAULT_FILE_PATH = "c:\\somedirectory\\";<xhtml:br/>
                           <xhtml:br/>public InputFileRead() {<xhtml:div style="margin-left:1em;">inputFilePath = DEFAULT_FILE_PATH;</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public void setInputFile(String inputFile) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>/* Assume appropriate validation / encoding is used and privileges / permissions are preserved */</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public void readInputFile() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>try {<xhtml:div style="margin-left:1em;">reader = new FileReader(readFile);<xhtml:br/>...</xhtml:div>} catch (RuntimeException rex) {<xhtml:div style="margin-left:1em;">System.err.println("Error: Cannot open input file in the directory " + inputFilePath);<xhtml:br/>System.err.println("Input file has not been set, call setInputFile method before calling readInputFile");</xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:br/>} catch (FileNotFoundException ex) {...}<xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the error message output to the user contains information regarding the default directory on the local file system. This information can be exploited and may lead to unauthorized access or use of the system. Any Java RuntimeExceptions that are handled should not expose sensitive information to the user.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the example below, the BankManagerLoginServlet servlet class will process a login request to determine if a user is authorized to use the BankManager Web service. The doPost method will retrieve the username and password from the servlet request and will determine if the user is authorized. If the user is authorized the servlet will go to the successful login page. Otherwise, the servlet will raise a FailedLoginException and output the failed login message to the error page of the service.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class BankManagerLoginServlet extends HttpServlet {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>try {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// Get username and password from login page request</xhtml:i>
                                       <xhtml:br/>String username = request.getParameter("username");<xhtml:br/>String password = request.getParameter("password");<xhtml:br/>
                                       <xhtml:i>// Authenticate user</xhtml:i>
                                       <xhtml:br/>BankManager bankMgr = new BankManager();<xhtml:br/>boolean isAuthentic = bankMgr.authenticateUser(username, password);<xhtml:br/>
                                       <xhtml:i>// If user is authenticated then go to successful login page</xhtml:i>
                                       <xhtml:br/>if (isAuthentic) {<xhtml:div style="margin-left:1em;">request.setAttribute("login", new String("Login Successful."));<xhtml:br/>getServletContext().getRequestDispatcher("/BankManagerServiceLoggedIn.jsp"). forward(request, response);</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>
                                             <xhtml:br/>
                                             <xhtml:i>// Otherwise, raise failed login exception and output unsuccessful login message to error page</xhtml:i>
                                             <xhtml:br/>throw new FailedLoginException("Failed Login for user " + username + " with password " + password);</xhtml:div>
                                       </xhtml:div>}</xhtml:div>
                                 </xhtml:div>} catch (FailedLoginException ex) {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// output failed login message to error page</xhtml:i>
                                       <xhtml:br/>request.setAttribute("error", new String("Login Error"));<xhtml:br/>request.setAttribute("message", ex.getMessage());<xhtml:br/>getServletContext().getRequestDispatcher("/ErrorPage.jsp").forward(request, response);</xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>However, the output message generated by the FailedLoginException includes the user-supplied password. Even if the password is erroneous, it is probably close to the correct password. Since it is printed to the user's page, anybody who can see the screen display will be able to see the password. Also, if the page is cached, the password might be written to disk.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through Java Runtime Error Message</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through Java Runtime Error Message</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="543" Name="Use of Singleton Pattern Without Synchronization in a Multithreaded Context" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses the singleton pattern when creating a resource within a multithreaded environment.</Description>
         <Extended_Description>The use of a singleton pattern may not be thread-safe.</Extended_Description>
         <Related_Weaknesses>
             <Related_Weakness Nature="ChildOf" CWE_ID="820" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="662" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="662" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Scope>Integrity</Scope>
               <Impact>Other</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use the Thread-Specific Storage Pattern. See References.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).</Description>
               <Effectiveness>Limited</Effectiveness>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This method is part of a singleton pattern, yet the following singleton() pattern is not thread-safe. It is possible that the method will create two objects instead of only one.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>private static NumberConverter singleton;<xhtml:br/>public static NumberConverter get_singleton() {<xhtml:div style="margin-left:1em;">if (singleton == null) {<xhtml:div style="margin-left:1em;">singleton = new NumberConverter();</xhtml:div>}<xhtml:br/>return singleton;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Consider the following course of events:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>Thread A enters the method, finds singleton to be null, begins the NumberConverter constructor, and then is swapped out of execution.</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Thread B enters the method and finds that singleton remains null. This will happen if A was swapped out during the middle of the constructor, because the object reference is not set to point at the new object on the heap until the object is fully initialized.</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Thread B continues and constructs another NumberConverter object and returns it while exiting the method.</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Thread A continues, finishes constructing its NumberConverter object, and returns its version.</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
               <Body_Text>At this point, the threads have created and returned two different objects.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC07-J</Entry_ID>
               <Entry_Name>Prevent multiple instantiations of singleton objects</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP19</Entry_ID>
               <Entry_Name>Missing Lock</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-474"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2010-09-27">Use of Singleton Pattern in a Non-thread-safe Manner</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="567" Name="Unsynchronized Access to Shared Data in a Multithreaded Context" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.</Description>
         <Extended_Description>
            <xhtml:p>Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable.</xhtml:p>
            <xhtml:p>Note that this weakness is not unique to servlets.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
             <Related_Weakness Nature="ChildOf" CWE_ID="820" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="662" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="662" View_ID="1340" Ordinal="Primary"/>
             <Related_Weakness Nature="CanPrecede" CWE_ID="488" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>DoS: Instability</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>If the shared variable contains sensitive data, it may be manipulated or displayed in another user session. If this data is used to control the application, its value can be manipulated to cause the application to crash or perform poorly.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code implements a basic counter for how many times the page has been accesed.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public static class Counter extends HttpServlet {<xhtml:div style="margin-left:1em;">static int count = 0;<xhtml:br/>protected void doGet(HttpServletRequest in, HttpServletResponse out)<xhtml:br/>throws ServletException, IOException {<xhtml:div style="margin-left:1em;">out.setContentType("text/plain");<xhtml:br/>PrintWriter p = out.getWriter();<xhtml:br/>count++;<xhtml:br/>p.println(count + " hits so far!");</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Consider when two separate threads, Thread A and Thread B, concurrently handle two different requests:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>Assume this is the first occurrence of doGet, so the value of count is 0.</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>doGet() is called within Thread A.</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>The execution of doGet() in Thread A continues to the point AFTER the value of the count variable is read, then incremented, but BEFORE it is saved back to count. At this stage, the incremented value is 1, but the value of count is 0.</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>doGet() is called within Thread B, and due to a higher thread priority, Thread B progresses to the point where the count variable is accessed (where it is still 0), incremented, and saved. After the save, count is 1.</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Thread A continues. It saves the intermediate, incremented value to the count variable - but the incremented value is 1, so count is "re-saved" to 1.</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
               <Body_Text>At this point, both Thread A and Thread B print that one hit has been seen, even though two separate requests have been processed. The value of count should be 2, not 1.</Body_Text>
               <Body_Text>While this example does not have any real serious implications, if the shared variable in question is used for resource tracking, then resource consumption could occur. Other scenarios exist.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>VNA00-J</Entry_ID>
               <Entry_Name>Ensure visibility when accessing shared primitive variables</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>VNA02-J</Entry_ID>
               <Entry_Name>Ensure that compound operations on shared variables are atomic</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP19</Entry_ID>
               <Entry_Name>Missing Lock</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="25"/>
         </Related_Attack_Patterns>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-09</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Made name and description more specific to match the essence of the rest of the entry.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Name, Other_Notes, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2010-12-13">Unsynchronized Access to Shared Data</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="568" Name="finalize() Method Without super.finalize()" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product contains a finalize() method that does not call super.finalize().</Description>
         <Extended_Description>The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize().</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="459" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Call the super.finalize() method.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use static analysis tools to spot such issues in your code.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following method omits the call to super.finalize().</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>protected void finalize() {<xhtml:div style="margin-left:1em;">discardNative();</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MET12-J</Entry_ID>
               <Entry_Name>Do not use finalizers</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP28</Entry_ID>
               <Entry_Name>Unexpected access points</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Erroneous Finalize Method</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="572" Name="Call to Thread run() instead of start()" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.</Description>
         <Extended_Description>In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="821" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use the start() method instead of the run() method.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following excerpt from a Java program mistakenly calls run() instead of start().</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Thread thr = new Thread() {<xhtml:div style="margin-left:1em;">public void run() {<xhtml:div style="margin-left:1em;">...</xhtml:div>}</xhtml:div>};<xhtml:br/>
                     <xhtml:br/>thr.run();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>THI00-J</Entry_ID>
               <Entry_Name>Do not invoke Thread.run()</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Call to Thread.run()</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="574" Name="EJB Bad Practices: Use of Synchronization Primitives" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.</Description>
         <Extended_Description>The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: "An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances." The specification justifies this requirement in the following way: "This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs."</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="695" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="821" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not use Synchronization Primitives when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example a Customer Entity EJB provides access to customer information in a database for a business application.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>@Entity<xhtml:br/>public class Customer implements Serializable {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>private String id;<xhtml:br/>private String firstName;<xhtml:br/>private String lastName;<xhtml:br/>private Address address;<xhtml:br/>
                           <xhtml:br/>public Customer() {...}<xhtml:br/>
                           <xhtml:br/>public Customer(String id, String firstName, String lastName) {...}<xhtml:br/>
                           <xhtml:br/>@Id<xhtml:br/>public String getCustomerId() {...}<xhtml:br/>
                           <xhtml:br/>public synchronized void setCustomerId(String id) {...}<xhtml:br/>
                           <xhtml:br/>public String getFirstName() {...}<xhtml:br/>
                           <xhtml:br/>public synchronized void setFirstName(String firstName) {...}<xhtml:br/>
                           <xhtml:br/>public String getLastName() {...}<xhtml:br/>
                           <xhtml:br/>public synchronized void setLastName(String lastName) {...}<xhtml:br/>
                           <xhtml:br/>@OneToOne()<xhtml:br/>public Address getAddress() {...}<xhtml:br/>
                           <xhtml:br/>public synchronized void setAddress(Address address) {...}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the customer entity EJB uses the synchronized keyword for the set methods to attempt to provide thread safe synchronization for the member variables. The use of synchronized methods violate the restriction of the EJB specification against the use synchronization primitives within EJBs. Using synchronization primitives may cause inconsistent behavior of the EJB when used within different EJB containers.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="575" Name="EJB Bad Practices: Use of AWT Swing" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.</Description>
         <Extended_Description>The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: "An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard." The specification justifies this requirement in the following way: "Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system."</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="695" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use AWT/Swing when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following Java example is a simple converter class for converting US dollars to Yen. This converter class demonstrates the improper practice of using a stateless session Enterprise JavaBean that implements an AWT Component and AWT keyboard event listener to retrieve keyboard input from the user for the amount of the US dollars to convert to Yen.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>@Stateless<xhtml:br/>public class ConverterSessionBean extends Component implements KeyListener, ConverterSessionRemote {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>/* member variables for receiving keyboard input using AWT API */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>...<xhtml:br/>private StringBuffer enteredText = new StringBuffer();<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* conversion rate on US dollars to Yen */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>private BigDecimal yenRate = new BigDecimal("115.3100");<xhtml:br/>
                           <xhtml:br/>public ConverterSessionBean() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>super();<xhtml:br/>
                                 <xhtml:i>/* method calls for setting up AWT Component for receiving keyboard input */</xhtml:i>
                                 <xhtml:br/>
                                 <xhtml:br/>...<xhtml:br/>addKeyListener(this);</xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public BigDecimal dollarToYen(BigDecimal dollars) {<xhtml:div style="margin-left:1em;">BigDecimal result = dollars.multiply(yenRate);<xhtml:br/>return result.setScale(2, BigDecimal.ROUND_DOWN);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* member functions for implementing AWT KeyListener interface */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>public void keyTyped(KeyEvent event) {<xhtml:div style="margin-left:1em;">...</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public void keyPressed(KeyEvent e) {<xhtml:br/>}<xhtml:br/>
                           <xhtml:br/>public void keyReleased(KeyEvent e) {<xhtml:br/>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* member functions for receiving keyboard input and displaying output */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>public void paint(Graphics g) {...}<xhtml:br/>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This use of the AWT and Swing APIs within any kind of Enterprise JavaBean not only violates the restriction of the EJB specification against using AWT or Swing within an EJB but also violates the intended use of Enterprise JavaBeans to separate business logic from presentation logic.</Body_Text>
               <Body_Text>The Stateless Session Enterprise JavaBean should contain only business logic. Presentation logic should be provided by some other mechanism such as Servlets or Java Server Pages (JSP) as in the following Java/JSP example.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>@Stateless<xhtml:br/>public class ConverterSessionBean implements ConverterSessionRemoteInterface {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>/* conversion rate on US dollars to Yen */</xhtml:i>
                           <xhtml:br/>private BigDecimal yenRate = new BigDecimal("115.3100");<xhtml:br/>
                           <xhtml:br/>public ConverterSessionBean() {<xhtml:br/>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* remote method to convert US dollars to Yen */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>public BigDecimal dollarToYen(BigDecimal dollars) {<xhtml:div style="margin-left:1em;">BigDecimal result = dollars.multiply(yenRate);<xhtml:br/>return result.setScale(2, BigDecimal.ROUND_DOWN);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Good" Language="JSP">
                  <xhtml:div>&lt;%@ page import="converter.ejb.Converter, java.math.*, javax.naming.*"%&gt;<xhtml:br/>&lt;%!<xhtml:div style="margin-left:1em;">
                        <xhtml:div>private Converter converter = null;<xhtml:br/>public void jspInit() {<xhtml:div style="margin-left:1em;">try {<xhtml:div style="margin-left:1em;">InitialContext ic = new InitialContext();<xhtml:br/>converter = (Converter) ic.lookup(Converter.class.getName());</xhtml:div>} catch (Exception ex) {<xhtml:div style="margin-left:1em;">System.out.println("Couldn't create converter bean."+ ex.getMessage());</xhtml:div>}</xhtml:div>}<xhtml:br/>public void jspDestroy() {<xhtml:div style="margin-left:1em;">converter = null;</xhtml:div>}</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>%&gt;<xhtml:br/>&lt;html&gt;<xhtml:div style="margin-left:1em;">
                        <xhtml:div>&lt;head&gt;&lt;title&gt;Converter&lt;/title&gt;&lt;/head&gt;<xhtml:br/>&lt;body bgcolor="white"&gt;<xhtml:div style="margin-left:1em;">
                              <xhtml:div>&lt;h1&gt;Converter&lt;/h1&gt;<xhtml:br/>&lt;hr&gt;<xhtml:br/>&lt;p&gt;Enter an amount to convert:&lt;/p&gt;<xhtml:br/>&lt;form method="get"&gt;<xhtml:div style="margin-left:1em;">&lt;input type="text" name="amount" size="25"&gt;&lt;br&gt;<xhtml:br/>&lt;p&gt;<xhtml:br/>&lt;input type="submit" value="Submit"&gt;<xhtml:br/>&lt;input type="reset" value="Reset"&gt;</xhtml:div>&lt;/form&gt;<xhtml:br/>&lt;%<xhtml:div style="margin-left:1em;">String amount = request.getParameter("amount");<xhtml:br/>if ( amount != null &amp;&amp; amount.length() &gt; 0 ) {<xhtml:div style="margin-left:1em;">BigDecimal d = new BigDecimal(amount);<xhtml:br/>BigDecimal yenAmount = converter.dollarToYen(d);</xhtml:div>
                                 </xhtml:div>
                                 <xhtml:br/>%&gt;<xhtml:br/>&lt;p&gt;<xhtml:br/>&lt;%= amount %&gt; dollars are &lt;%= yenAmount %&gt; Yen.<xhtml:br/>&lt;p&gt;<xhtml:br/>&lt;%<xhtml:div style="margin-left:1em;">}</xhtml:div>
                                 <xhtml:br/>%&gt;</xhtml:div>
                           </xhtml:div>&lt;/body&gt;</xhtml:div>
                     </xhtml:div>&lt;/html&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="576" Name="EJB Bad Practices: Use of Java I/O" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.</Description>
         <Extended_Description>The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: "An enterprise bean must not use the java.io package to attempt to access files and directories in the file system." The specification justifies this requirement in the following way: "The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data."</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="695" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not use Java I/O when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following Java example is a simple stateless Enterprise JavaBean that retrieves the interest rate for the number of points for a mortgage. In this example, the interest rates for various points are retrieved from an XML document on the local file system, and the EJB uses the Java I/O API to retrieve the XML document from the local file system.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>@Stateless<xhtml:br/>public class InterestRateBean implements InterestRateRemote {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>private Document interestRateXMLDocument = null;<xhtml:br/>private File interestRateFile = null;<xhtml:br/>
                           <xhtml:br/>public InterestRateBean() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>try {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>/* get XML document from the local filesystem */</xhtml:i>
                                       <xhtml:br/>interestRateFile = new File(Constants.INTEREST_RATE_FILE);<xhtml:br/>
                                       <xhtml:br/>if (interestRateFile.exists())<xhtml:br/>{<xhtml:div style="margin-left:1em;">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();<xhtml:br/>DocumentBuilder db = dbf.newDocumentBuilder();<xhtml:br/>interestRateXMLDocument = db.parse(interestRateFile);</xhtml:div>}</xhtml:div>
                                 </xhtml:div>} catch (IOException ex) {...}</xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public BigDecimal getInterestRate(Integer points) {<xhtml:div style="margin-left:1em;">return getInterestRateFromXML(points);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* member function to retrieve interest rate from XML document on the local file system */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>private BigDecimal getInterestRateFromXML(Integer points) {...}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This use of the Java I/O API within any kind of Enterprise JavaBean violates the EJB specification by using the java.io package for accessing files within the local filesystem.</Body_Text>
               <Body_Text>An Enterprise JavaBean should use a resource manager API for storing and accessing data. In the following example, the private member function getInterestRateFromXMLParser uses an XML parser API to retrieve the interest rates.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>@Stateless<xhtml:br/>public class InterestRateBean implements InterestRateRemote {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>public InterestRateBean() {<xhtml:br/>}<xhtml:br/>
                           <xhtml:br/>public BigDecimal getInterestRate(Integer points) {<xhtml:div style="margin-left:1em;">return getInterestRateFromXMLParser(points);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* member function to retrieve interest rate from XML document using an XML parser API */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>private BigDecimal getInterestRateFromXMLParser(Integer points) {...}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="577" Name="EJB Bad Practices: Use of Sockets" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product violates the Enterprise JavaBeans (EJB) specification by using sockets.</Description>
         <Extended_Description>The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: "An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast." The specification justifies this requirement in the following way: "The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients."</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Do not use Sockets when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following Java example is a simple stateless Enterprise JavaBean that retrieves stock symbols and stock values. The Enterprise JavaBean creates a socket and listens for and accepts connections from clients on the socket.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>@Stateless<xhtml:br/>public class StockSymbolBean implements StockSymbolRemote {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>ServerSocket serverSocket = null;<xhtml:br/>Socket clientSocket = null;<xhtml:br/>
                           <xhtml:br/>public StockSymbolBean() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>try {<xhtml:div style="margin-left:1em;">serverSocket = new ServerSocket(Constants.SOCKET_PORT);</xhtml:div>} catch (IOException ex) {...}<xhtml:br/>
                                 <xhtml:br/>try {<xhtml:div style="margin-left:1em;">clientSocket = serverSocket.accept();</xhtml:div>} catch (IOException e) {...}</xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public String getStockSymbol(String name) {...}<xhtml:br/>
                           <xhtml:br/>public BigDecimal getStockValue(String symbol) {...}<xhtml:br/>
                           <xhtml:br/>private void processClientInputFromSocket() {...}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>And the following Java example is similar to the previous example but demonstrates the use of multicast socket connections within an Enterprise JavaBean.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>@Stateless<xhtml:br/>public class StockSymbolBean extends Thread implements StockSymbolRemote {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>ServerSocket serverSocket = null;<xhtml:br/>Socket clientSocket = null;<xhtml:br/>boolean listening = false;<xhtml:br/>
                           <xhtml:br/>public StockSymbolBean() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>try {<xhtml:div style="margin-left:1em;">serverSocket = new ServerSocket(Constants.SOCKET_PORT);</xhtml:div>} catch (IOException ex) {...}<xhtml:br/>
                                 <xhtml:br/>listening = true;<xhtml:br/>while(listening) {<xhtml:div style="margin-left:1em;">start();</xhtml:div>}</xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public String getStockSymbol(String name) {...}<xhtml:br/>
                           <xhtml:br/>public BigDecimal getStockValue(String symbol) {...}<xhtml:br/>
                           <xhtml:br/>public void run() {<xhtml:div style="margin-left:1em;">try {<xhtml:div style="margin-left:1em;">clientSocket = serverSocket.accept();</xhtml:div>} catch (IOException e) {...}<xhtml:br/>...</xhtml:div>}<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The previous two examples within any type of Enterprise JavaBean violate the EJB specification by attempting to listen on a socket, accepting connections on a socket, or using a socket for multicast.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="578" Name="EJB Bad Practices: Use of Class Loader" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.</Description>
         <Extended_Description>The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: "The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams." The specification justifies this requirement in the following way: "These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment."</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Do not use the Class Loader when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following Java example is a simple stateless Enterprise JavaBean that retrieves the interest rate for the number of points for a mortgage. The interest rates for various points are retrieved from an XML document on the local file system, and the EJB uses the Class Loader for the EJB class to obtain the XML document from the local file system as an input stream.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>@Stateless<xhtml:br/>public class InterestRateBean implements InterestRateRemote {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>private Document interestRateXMLDocument = null;<xhtml:br/>
                           <xhtml:br/>public InterestRateBean() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>try {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// get XML document from the local filesystem as an input stream</xhtml:i>
                                       <xhtml:br/>
                                       <xhtml:br/>
                                       <xhtml:i>// using the ClassLoader for this class</xhtml:i>
                                       <xhtml:br/>ClassLoader loader = this.getClass().getClassLoader();<xhtml:br/>InputStream in = loader.getResourceAsStream(Constants.INTEREST_RATE_FILE);</xhtml:div>
                                 </xhtml:div>
                              </xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();<xhtml:div style="margin-left:1em;">DocumentBuilder db = dbf.newDocumentBuilder();<xhtml:br/>interestRateXMLDocument = db.parse(interestRateFile);</xhtml:div>} catch (IOException ex) {...}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>public BigDecimal getInterestRate(Integer points) {<xhtml:div style="margin-left:1em;">return getInterestRateFromXML(points);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* member function to retrieve interest rate from XML document on the local file system */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>private BigDecimal getInterestRateFromXML(Integer points) {...}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This use of the Java Class Loader class within any kind of Enterprise JavaBean violates the restriction of the EJB specification against obtaining the current class loader as this could compromise the security of the application using the EJB.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>An EJB is also restricted from creating a custom class loader and creating a class and instance of a class from the class loader, as shown in the following example.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>@Stateless<xhtml:br/>public class LoaderSessionBean implements LoaderSessionRemote {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>public LoaderSessionBean() {<xhtml:div style="margin-left:1em;">try {<xhtml:div style="margin-left:1em;">ClassLoader loader = new CustomClassLoader();<xhtml:br/>Class c = loader.loadClass("someClass");<xhtml:br/>Object obj = c.newInstance();<xhtml:br/>/* perform some task that uses the new class instance member variables or functions */<xhtml:br/>...</xhtml:div>} catch (Exception ex) {...}</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public class CustomClassLoader extends ClassLoader {<xhtml:br/>
                           <xhtml:br/>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="579" Name="J2EE Bad Practices: Non-serializable Object Stored in Session" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.</Description>
         <Extended_Description>A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>In order for session replication to work, the values the product stores as attributes in the session must implement the Serializable interface.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following class adds itself to the session, but because it is not serializable, the session can no longer be replicated.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class DataGlob {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>String globName;<xhtml:br/>String globValue;<xhtml:br/>
                           <xhtml:br/>public void addToSession(HttpSession session) {<xhtml:div style="margin-left:1em;">session.setAttribute("glob", this);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP1</Entry_ID>
               <Entry_Name>Glitch in computation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="580" Name="clone() Method Without super.clone()" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product contains a clone() method that does not call super.clone() to obtain the new object.</Description>
         <Extended_Description>All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Unexpected State</Impact>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Call super.clone() within your clone() method, when obtaining a new object.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>In some cases, you can eliminate the clone method altogether and use copy constructors.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following two classes demonstrate a bug introduced by not calling super.clone(). Because of the way Kibitzer implements clone(), FancyKibitzer's clone method will return an object of type Kibitzer instead of FancyKibitzer.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class Kibitzer {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public Object clone() throws CloneNotSupportedException {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>Object returnMe = new Kibitzer();<xhtml:br/>...</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public class FancyKibitzer extends Kibitzer{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public Object clone() throws CloneNotSupportedException {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>Object returnMe = super.clone();<xhtml:br/>...</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP28</Entry_ID>
               <Entry_Name>Unexpected access points</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Erroneous Clone Method</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="581" Name="Object Model Violation: Just One of Equals and Hashcode Defined" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not maintain equal hashcodes for equal objects.</Description>
         <Extended_Description>Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="697" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>If this invariant is not upheld, it is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Both Equals() and Hashcode() should be defined.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MET09-J</Entry_ID>
               <Entry_Name>Classes that define an equals() method must also define a hashCode() method</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-01-30">Object Model Violation: Just One of Equals and Haschode Defined</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="582" Name="Array Declared Public, Final, and Static" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.</Description>
         <Extended_Description>Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your product is running.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>In most situations the array should be made private.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following Java Applet code mistakenly declares an array public, final and static.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public final class urlTool extends Applet {<xhtml:div style="margin-left:1em;">public final static URL[] urls;<xhtml:br/>...</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>OBJ10-J</Entry_ID>
               <Entry_Name>Do not use public static nonfinal variables</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP28</Entry_ID>
               <Entry_Name>Unexpected Access Points</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Background_Details, Demonstrative_Examples, Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Background_Details, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Mobile Code: Unsafe Array Declaration</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="583" Name="finalize() Method Declared Public" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product violates secure coding principles for mobile code by declaring a finalize() method public.</Description>
         <Extended_Description>A product should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following Java Applet code mistakenly declares a public finalize() method.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public final class urlTool extends Applet {<xhtml:div style="margin-left:1em;">public void finalize() {<xhtml:div style="margin-left:1em;">...</xhtml:div>}<xhtml:br/>...</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your product is running.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MET12-J</Entry_ID>
               <Entry_Name>Do not use finalizers</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP28</Entry_ID>
               <Entry_Name>Unexpected access points</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Mobile Code: Public Finalize Method</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="585" Name="Empty Synchronized Block" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product contains an empty synchronized block.</Description>
         <Extended_Description>An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1071" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>An empty synchronized block will wait until nobody else is using the synchronizer being specified. While this may be part of the desired behavior, because you haven't protected the subsequent code by placing it inside the synchronized block, nothing is stopping somebody else from modifying whatever it was you were waiting for while you run the subsequent code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to synchronize on an object, but does not execute anything in the synchronized block. This does not actually accomplish anything and may be a sign that a programmer is wrestling with synchronization but has not yet achieved the result they intend.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>synchronized(this) { }</xhtml:div>
               </Example_Code>
               <Body_Text>Instead, in a correct usage, the synchronized statement should contain procedures that access or modify data that is exposed to multiple threads. For example, consider a scenario in which several threads are accessing student records at the same time. The method which sets the student ID to a new value will need to make sure that nobody else is accessing this data at the same time and will require synchronization.</Body_Text>
               <Example_Code Nature="Good">
                  <xhtml:div>public void setID(int ID){<xhtml:div style="margin-left:1em;">synchronized(this){<xhtml:div style="margin-left:1em;">this.ID = ID;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP21</Entry_ID>
               <Entry_Name>Multiple locks/unlocks</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-478"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="586" Name="Explicit Call to Finalize()" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product makes an explicit call to the finalize() method from outside the finalizer.</Description>
         <Extended_Description>While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1076" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Unexpected State</Impact>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Testing</Phase>
               <Description>Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code fragment calls finalize() explicitly:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// time to clean up</xhtml:i>
                     <xhtml:br/>widget.finalize();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MET12-J</Entry_ID>
               <Entry_Name>Do not use finalizers</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP3</Entry_ID>
               <Entry_Name>Use of an improper API</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Name, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-09-09">Explicit Call to Finalize</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="594" Name="J2EE Framework: Saving Unserializable Objects to Disk" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.</Description>
         <Extended_Description>In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Data represented by unserializable objects can be corrupted.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>Non-serializability of objects can lead to system crash.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example, a Customer Entity JavaBean provides access to customer information in a database for a business application. The Customer Entity JavaBean is used as a session scoped object to return customer information to a Session EJB.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>@Entity<xhtml:br/>public class Customer {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>private String id;<xhtml:br/>private String firstName;<xhtml:br/>private String lastName;<xhtml:br/>private Address address;<xhtml:br/>
                           <xhtml:br/>public Customer() {<xhtml:br/>}<xhtml:br/>
                           <xhtml:br/>public Customer(String id, String firstName, String lastName) {...}<xhtml:br/>
                           <xhtml:br/>@Id<xhtml:br/>public String getCustomerId() {...}<xhtml:br/>
                           <xhtml:br/>public void setCustomerId(String id) {...}<xhtml:br/>
                           <xhtml:br/>public String getFirstName() {...}<xhtml:br/>
                           <xhtml:br/>public void setFirstName(String firstName) {...}<xhtml:br/>
                           <xhtml:br/>public String getLastName() {...}<xhtml:br/>
                           <xhtml:br/>public void setLastName(String lastName) {...}<xhtml:br/>
                           <xhtml:br/>@OneToOne()<xhtml:br/>public Address getAddress() {...}<xhtml:br/>
                           <xhtml:br/>public void setAddress(Address address) {...}</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the Customer Entity JavaBean is an unserialized object which can cause serialization failure and crash the application when the J2EE container attempts to write the object to the system. Session scoped objects must implement the Serializable interface to ensure that the objects serialize properly.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public class Customer implements Serializable {...}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP1</Entry_ID>
               <Entry_Name>Glitch in computation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Persistence in J2EE Frameworks</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="595" Name="Comparison of Object References Instead of Object Contents" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.</Description>
         <Extended_Description>For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1025" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="JavaScript" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Note>This weakness can lead to erroneous results that can cause unexpected application behaviors.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-60">
               <Intro_Text>In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String str1 = new String("Hello");<xhtml:br/>String str2 = new String("Hello");<xhtml:br/>if (str1 == str2) {<xhtml:div style="margin-left:1em;">System.out.println("str1 == str2");</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the if statement will not be executed as the strings are compared using the "==" operator. For Java objects, such as String objects, the "==" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method:</Body_Text>
               <Example_Code Nature="Good">
                  <xhtml:div>if (str1.equals(str2)) {<xhtml:div style="margin-left:1em;">System.out.println("str1 equals str2");</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example, two BankAccount objects are compared in the isSameAccount method using the == operator.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public boolean isSameAccount(BankAccount accountA, BankAccount accountB) {<xhtml:div style="margin-left:1em;">return accountA == accountB;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Using the == operator to compare objects may produce incorrect or deceptive results by comparing object references rather than values. The equals() method should be used to ensure correct results or objects should contain a member variable that uniquely identifies the object.</Body_Text>
               <Body_Text>The following example shows the use of the equals() method to compare the BankAccount objects and the next example uses a class get method to retrieve the bank account number that uniquely identifies the BankAccount object to compare the objects.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public boolean isSameAccount(BankAccount accountA, BankAccount accountB) {<xhtml:div style="margin-left:1em;">return accountA.equals(accountB);</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>EXP02-J</Entry_ID>
               <Entry_Name>Use the two-argument Arrays.equals() method to compare the contents of arrays</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>EXP02-J</Entry_ID>
               <Entry_Name>Use the two-argument Arrays.equals() method to compare the contents of arrays</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>EXP03-J</Entry_ID>
               <Entry_Name>Do not use the equality operators when comparing values of boxed primitives</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-954"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Content Team</Submission_Name>
				<Submission_Organization>MITRE</Submission_Organization>
                <Submission_Date>2006-12-15</Submission_Date>
                <Submission_Version>Draft 5</Submission_Version>
                <Submission_ReleaseDate>2006-12-15</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Other_Notes, Potential_Mitigations, References, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Incorrect Object Comparison: Syntactic</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Incorrect Syntactic Object Comparison</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="6" Name="J2EE Misconfiguration: Insufficient Session-ID Length" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The J2EE application is configured to use an insufficient session ID length.</Description>
         <Extended_Description>If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="334" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <xhtml:p>Session ID's can be used to identify communicating parties in a web environment.</xhtml:p>
               <xhtml:p>The expected number of seconds required to guess a valid session identifier is given by the equation: (2^B+1)/(2*A*S) Where: - B is the number of bits of entropy in the session identifier. - A is the number of guesses an attacker can try each second. - S is the number of valid session identifiers that are valid and available to be guessed at any given time. The number of bits of entropy in the session identifier is always less than the total number of bits in the session identifier. For example, if session identifiers were provided in ascending order, there would be close to zero bits of entropy in the session identifier no matter the identifier's length. Assuming that the session identifiers are being generated using a good source of random numbers, we will estimate the number of bits of entropy in a session identifier to be half the total number of bits in the session identifier. For realistic identifier lengths this is possible, though perhaps optimistic.</xhtml:p>
            </Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If an attacker can guess an authenticated user's session identifier, they can take over the user's session.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-47">
               <Intro_Text>The following XML example code is a deployment descriptor for a Java web application deployed on a Sun Java Application Server. This deployment descriptor includes a session configuration property for configuring the session ID length.</Intro_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;sun-web-app&gt;<xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>&lt;session-config&gt;<xhtml:div style="margin-left:1em;">
                              <xhtml:div>&lt;session-properties&gt;<xhtml:div style="margin-left:1em;">&lt;property name="idLengthBytes" value="8"&gt;<xhtml:div style="margin-left:1em;">&lt;description&gt;The number of bytes in this web module's session ID.&lt;/description&gt;</xhtml:div>&lt;/property&gt;</xhtml:div>&lt;/session-properties&gt;</xhtml:div>
                           </xhtml:div>&lt;/session-config&gt;<xhtml:br/>...</xhtml:div>
                     </xhtml:div>&lt;/sun-web-app&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This deployment descriptor has set the session ID length for this Java web application to 8 bytes (or 64 bits). The session ID length for Java web applications should be set to 16 bytes (128 bits) to prevent attackers from guessing and/or stealing a session ID and taking over a user's session.</Body_Text>
               <Body_Text>Note for most application servers including the Sun Java Application Server the session ID length is by default set to 128 bits and should not be changed. And for many application servers the session ID length cannot be changed from this default setting. Check your application server documentation for the session ID length default setting and configuration options to ensure that the session ID length is set to 128 bits.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>J2EE Misconfiguration: Insufficient Session-ID Length</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-482"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Background_Details, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Enabling_Factors_for_Exploitation, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="607" Name="Public Static Final Field References Mutable Object" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="471" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Protect mutable objects by making them private. Restrict access to the getter and setter as well.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Here, an array (which is inherently mutable) is labeled public static final.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public static final String[] USER_ROLES;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2007-05-07</Submission_Date>
               <Submission_Version>Draft 6</Submission_Version>
               <Submission_ReleaseDate>2007-05-07</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="608" Name="Struts: Non-private Field in ActionForm Class" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for a online business site. The user will enter registration data and through the Struts framework the RegistrationForm bean will maintain the user data.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class RegistrationForm extends org.apache.struts.validator.ValidatorForm {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>// variables for registration form<xhtml:br/>public String name;<xhtml:br/>public String email;<xhtml:br/>...<xhtml:br/>
                           <xhtml:br/>public RegistrationForm() {<xhtml:div style="margin-left:1em;">super();</xhtml:div>}<xhtml:br/>public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}<xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, within the RegistrationForm the member variables for the registration form input data are declared public not private. All member variables within a Struts framework ActionForm class must be declared private to prevent the member variables from being modified without using the getter and setter methods. The following example shows the member variables being declared private and getter and setter methods declared for accessing the member variables.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public class RegistrationForm extends org.apache.struts.validator.ValidatorForm {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>// private variables for registration form<xhtml:br/>private String name;<xhtml:br/>private String email;<xhtml:br/>...<xhtml:br/>
                           <xhtml:br/>public RegistrationForm() {<xhtml:div style="margin-left:1em;">super();</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:div style="margin-left:1em;">// getter and setter methods for private variables<xhtml:br/>...</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP28</Entry_ID>
               <Entry_Name>Unexpected access points</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2007-05-07</Submission_Date>
               <Submission_Version>Draft 6</Submission_Version>
               <Submission_ReleaseDate>2007-05-07</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="609" Name="Double-Checked Locking" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.</Description>
         <Extended_Description>Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as it is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="667" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="367" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the "volatile" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-70">
               <Intro_Text>It may seem that the following bit of code achieves thread safety while avoiding unnecessary synchronization...</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>if (helper == null) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>synchronized (this) {<xhtml:div style="margin-left:1em;">if (helper == null) {<xhtml:div style="margin-left:1em;">helper = new Helper();</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>return helper;</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer wants to guarantee that only one Helper() object is ever allocated, but does not want to pay the cost of synchronization every time this code is called.</Body_Text>
               <Body_Text>Suppose that helper is not initialized. Then, thread A sees that helper==null and enters the synchronized block and begins to execute:</Body_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>helper = new Helper();</xhtml:div>
               </Example_Code>
               <Body_Text>If a second thread, thread B, takes over in the middle of this call and helper has not finished running the constructor, then thread B may make calls on helper while its fields hold incorrect values.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>LCK10-J</Entry_ID>
               <Entry_Name>Do not use incorrect forms of the double-checked locking idiom</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP19</Entry_ID>
               <Entry_Name>Missing Lock</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-490"/>
            <Reference External_Reference_ID="REF-491"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 13, &#34;Threading Vulnerabilities&#34;, Page 815"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2007-05-07</Submission_Date>
               <Submission_Version>Draft 6</Submission_Version>
               <Submission_ReleaseDate>2007-05-07</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Context_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Double Checked Locking</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="7" Name="J2EE Misconfiguration: Missing Custom Error Page" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The default error page of a web application should not display sensitive information about the product.</Description>
         <Extended_Description>
            <xhtml:p>A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response.</xhtml:p>
            <xhtml:p>When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="756" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>A stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Handle exceptions appropriately in source code.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>System Configuration</Phase>
               <Description>Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not attempt to process an error or attempt to mask it.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Verify return values are correct and do not supply sensitive information about the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-76">
               <Intro_Text>In the snippet below, an unchecked runtime exception thrown from within the try block may cause the container to display its default error page (which may contain a full stack trace, among other things).</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:1em;">try {<xhtml:div style="margin-left:1em;">...</xhtml:div>} catch (ApplicationSpecificException ase) {<xhtml:div style="margin-left:1em;">logger.error("Caught: " + ase.toString());</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>J2EE Misconfiguration: Missing Error Handling</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-65"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-03-10">J2EE Misconfiguration: Missing Error Handling</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="766" Name="Critical Data Element Declared Public" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.</Description>
	 <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="1061" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>Making a critical variable public allows anyone with access to the object in which the variable is contained to alter or read the value.</Note>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Reduce Maintainability</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example declares a critical variable public, making it accessible to anyone with access to the object in which it is contained.</Intro_Text>
               <Example_Code Nature="Bad" Language="C++">
                  <xhtml:div>public: char* password;</xhtml:div>
               </Example_Code>
               <Body_Text>Instead, the critical data should be declared private.</Body_Text>
               <Example_Code Nature="Good" Language="C++">
                  <xhtml:div>private: char* password;</xhtml:div>
               </Example_Code>
               <Body_Text>Even though this example declares the password to be private, there are other possible issues with this implementation, such as the possibility of recovering the password from process memory (CWE-257).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a basic user account class that includes member variables for the username and password as well as a public constructor for the class and a public method to authorize access to the user account.</Intro_Text>
               <Example_Code Nature="Bad" Language="C++">
                  <xhtml:div>#define MAX_PASSWORD_LENGTH 15<xhtml:br/>#define MAX_USERNAME_LENGTH 15<xhtml:br/>
                     <xhtml:br/>class UserAccount<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public:<xhtml:div style="margin-left:1em;">
                              <xhtml:div>UserAccount(char *username, char *password)<xhtml:br/>{<xhtml:div style="margin-left:1em;">if ((strlen(username) &gt; MAX_USERNAME_LENGTH) ||<xhtml:br/>(strlen(password) &gt; MAX_PASSWORD_LENGTH)) {<xhtml:div style="margin-left:1em;">ExitError("Invalid username or password");</xhtml:div>}<xhtml:br/>strcpy(this-&gt;username, username);<xhtml:br/>strcpy(this-&gt;password, password);</xhtml:div>}</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>int authorizeAccess(char *username, char *password)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if ((strlen(username) &gt; MAX_USERNAME_LENGTH) ||<xhtml:br/>(strlen(password) &gt; MAX_PASSWORD_LENGTH)) {<xhtml:div style="margin-left:1em;">ExitError("Invalid username or password");</xhtml:div>}<xhtml:br/>
                                 <xhtml:i>// if the username and password in the input parameters are equal to</xhtml:i>
                                 <xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// the username and password of this account class then authorize access</xhtml:i>
                                 <xhtml:br/>if (strcmp(this-&gt;username, username) ||<xhtml:br/>strcmp(this-&gt;password, password))<xhtml:div style="margin-left:1em;">return 0;</xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>// otherwise do not authorize access</xhtml:i>
                                 <xhtml:br/>else<xhtml:div style="margin-left:1em;">return 1;</xhtml:div>
                              </xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:br/>char username[MAX_USERNAME_LENGTH+1];<xhtml:br/>char password[MAX_PASSWORD_LENGTH+1];</xhtml:div>
                     </xhtml:div>};</xhtml:div>
               </Example_Code>
               <Body_Text>However, the member variables username and password are declared public and therefore will allow access and changes to the member variables to anyone with access to the object. These member variables should be declared private as shown below to prevent unauthorized access and changes.</Body_Text>
               <Example_Code Nature="Good" Language="C++">
                  <xhtml:div>class UserAccount<xhtml:br/>{<xhtml:br/>public:<xhtml:div style="margin-left:1em;">...</xhtml:div>
                     <xhtml:br/>
                     <xhtml:br/>private:<xhtml:div style="margin-left:1em;">char username[MAX_USERNAME_LENGTH+1];<xhtml:br/>char password[MAX_PASSWORD_LENGTH+1];</xhtml:div>};</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2010-3860</Reference>
               <Description>variables declared public allows remote read of system properties such as user name and home directory.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-3860</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to protect stored data from modification</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>OBJ01-J</Entry_ID>
               <Entry_Name>Declare data members as private and provide accessible wrapper methods</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP28</Entry_ID>
               <Entry_Name>Unexpected access points</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
               <Entry_ID>ASCMM-MNT-15</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-15"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-03-03</Submission_Date>
               <Submission_Version>1.4</Submission_Version>
               <Submission_ReleaseDate>2009-05-27</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description, Name, References, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships, Time_of_Introduction, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2019-01-03">Critical Variable Declared Public</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="767" Name="Access to Critical Private Variable via Public Method" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product defines a public method that reads or modifies a private variable.</Description>
         <Extended_Description>If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example declares a critical variable to be private, and then allows the variable to be modified by public methods.</Intro_Text>
               <Example_Code Nature="Bad" Language="C++">
                  <xhtml:div>private: float price;<xhtml:br/>public: void changePrice(float newPrice) {<xhtml:div style="margin-left:1em;">price = newPrice;</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example could be used to implement a user forum where a single user (UID) can switch between multiple profiles (PID).</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class Client {<xhtml:div style="margin-left:1em;">private int UID;<xhtml:br/>public int PID;<xhtml:br/>private String userName;<xhtml:br/>public Client(String userName){<xhtml:div style="margin-left:1em;">PID = getDefaultProfileID();<xhtml:br/>UID = mapUserNametoUID( userName );<xhtml:br/>this.userName = userName;</xhtml:div>}<xhtml:br/>public void setPID(int ID) {<xhtml:div style="margin-left:1em;">UID = ID;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer implemented setPID with the intention of modifying the PID variable, but due to a typo. accidentally specified the critical variable UID instead. If the program allows profile IDs to be between 1 and 10, but a UID of 1 means the user is treated as an admin, then a user could gain administrative privileges as a result of this typo.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to protect stored data from modification</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>OOP31-PL</Entry_ID>
               <Entry_Name>Do not access private variables or subroutines in other packages</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">This entry is closely associated with access control for public methods. If the public methods are restricted with proper access controls, then the information in the private variable will not be exposed to unexpected parties. There may be chaining or composite relationships between improper access controls and this weakness.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-03-03</Submission_Date>
               <Submission_Version>1.4</Submission_Version>
               <Submission_ReleaseDate>2009-05-27</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="917" Name="Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.</Description>
	 <Extended_Description>Frameworks such as Java Server Page (JSP) allow a developer to insert executable expressions within otherwise-static content. When the developer is not aware of the executable nature of these expressions and/or does not disable them, then if an attacker can inject expressions, this could lead to code execution or other unexpected behaviors.</Extended_Description>
         <Related_Weaknesses>
             <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="PeerOf" CWE_ID="1336" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>EL Injection</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Avoid adding user-controlled data into an expression interpreter when possible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>If user-controlled data must be added to an expression interpreter, one or more of the following should be performed:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>Validate that the user input will not evaluate as an expression</xhtml:li>
                        <xhtml:li>Encode the user input in a way that ensures it is not evaluated as an expression</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Operation</Phase>
               <Description>The framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to "true".</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
			  <Observed_Example>
			    <Reference>CVE-2021-44228</Reference>
			    <Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability in log4j)</Description>
			    <Link>https://www.cve.org/CVERecord?id=CVE-2021-44228</Link>
			  </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-911"/>
            <Reference External_Reference_ID="REF-912"/>
            <Reference External_Reference_ID="REF-1279"/>
            <Reference External_Reference_ID="REF-1280"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">The interrelationships and differences between CWE-917 and CWE-1336 need to be further clarified.</Note>
            <Note Type="Relationship">In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-02-15</Submission_Date>
               <Submission_Version>2.4</Submission_Version>
               <Submission_ReleaseDate>2013-02-21</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Contribution Type="Feedback">
               <Contribution_Name>Dan Amodio, Dave Wichers</Contribution_Name>
               <Contribution_Organization>Aspect Security</Contribution_Organization>
               <Contribution_Date>2013-02-15</Contribution_Date>
               <Contribution_Comment>Suggested adding this weakness and provided references.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="95" Name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. "eval").</Description>
         <Extended_Description>This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="94" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="JavaScript" Prevalence="Undetermined"/>
            <Language Name="Python" Prevalence="Undetermined"/>
            <Language Name="Perl" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Name="Ruby" Prevalence="Undetermined"/>
            <Language Class="Interpreted" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
	    <Introduction>
               <Phase>Implementation</Phase>
               <Note>This weakness is prevalent in handler/dispatch procedures that might want to invoke a large number of functions, or set a large number of variables.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The injected code could access restricted data / files.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>In some cases, injectable code controls authentication; this may lead to a remote vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Injected code can access resources that the attacker is directly prevented from accessing.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Often the actions performed by injected control code are unlogged.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>If possible, refactor your code so that it does not need to use eval() at all.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</xhtml:p>
                  <xhtml:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-31">
               <Intro_Text>edit-config.pl: This CGI script is used to modify settings in a configuration file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>use CGI qw(:standard);<xhtml:br/>
                     <xhtml:br/>sub config_file_add_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:i># code to add a field/key to a file goes here</xhtml:i><xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_set_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:i># code to set key to a particular file goes here</xhtml:i><xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_delete_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:i># code to delete key from a particular file goes here</xhtml:i><xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub handleConfigAction {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $action) = @_;<xhtml:br/>my $key = param('key');<xhtml:br/>my $val = param('val');<xhtml:br/>
                        
                           <xhtml:i># this is super-efficient code, especially if you have to invoke</xhtml:i><xhtml:br/>
                           <xhtml:i># any one of dozens of different functions!</xhtml:i><xhtml:br/>
                           <xhtml:br/>my $code = "config_file_$action_key(\$fname, \$key, \$val);";<xhtml:br/>eval($code);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>$configfile = "/home/cwe/config.txt";<xhtml:br/>print header;<xhtml:br/>if (defined(param('action'))) {<xhtml:div style="margin-left:1em;">handleConfigAction($configfile, param('action'));</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">print "No action specified!\n";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>add_key(",","); system("/bin/ls");</xhtml:div>
               </Example_Code>
               <Body_Text>This would produce the following string in handleConfigAction():</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>config_file_add_key(",","); system("/bin/ls");</xhtml:div>
               </Example_Code>
               <Body_Text>Any arbitrary Perl code could be added after the attacker has "closed off" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the "_key(\$fname, \$key, \$val)" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-156">
               <Intro_Text>This simple script asks a user to supply a list of numbers as input and adds them together.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>
                  def main():<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                     sum = 0<xhtml:br/>
                     numbers = eval(input("Enter a space-separated list of numbers: "))<xhtml:br/>
                     for num in numbers:<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                        sum = sum + num<xhtml:br/>
                        </xhtml:div>
                     print(f"Sum of {numbers} = {sum}")
                     </xhtml:div>
                  main()
                  </xhtml:div>
               </Example_Code>
               <Body_Text>The eval() function can take the user-supplied list and convert it into a Python list object, therefore allowing the programmer to use list comprehension methods to work with the data. However, if code is supplied to the eval() function, it will execute that code. For example, a malicious user could supply the following string:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>__import__('subprocess').getoutput('rm -r *')</xhtml:div>
               </Example_Code>
               <Body_Text>This would delete all the files in the current directory. For this reason, it is not recommended to use eval() with untrusted input.</Body_Text>
	       <Body_Text>A way to accomplish this without the use of eval() is to apply an integer conversion on the input within a try/except block. If the user-supplied input is not numeric, this will raise a ValueError. By avoiding eval(), there is no opportunity for the input string to be executed as code.</Body_Text>
               <Example_Code Nature="Good" Language="Python">
                  <xhtml:div>
                  def main():<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                     sum = 0<xhtml:br/>
                     numbers = input("Enter a space-separated list of numbers: ").split(" ")<xhtml:br/>
                     try:<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                        for num in numbers:<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                           sum = sum + int(num)<xhtml:br/>
                           </xhtml:div>
                        print(f"Sum of {numbers} = {sum}")
                        </xhtml:div>
                     except ValueError:<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                        print("Error: invalid input")<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  main()
                  </xhtml:div>
               </Example_Code>
               <Body_Text>An alternative option is to use the ast.literal_eval() function from Python's ast module. This function considers only Python literals as valid data types and will not execute any code contained within the user input.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-2054</Reference>
               <Description>Python compiler uses eval() to execute malicious strings as Python code.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-2054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22204</Reference>
               <Description>Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22204</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22205</Reference>
               <Description>Chain: backslash followed by a newline can bypass a validation step (CWE-20), leading to eval injection (CWE-95), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22205</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5071</Reference>
               <Description>Eval injection in PHP program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5071</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1750</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1750</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5305</Reference>
               <Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5305</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1752</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1752</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1753</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1753</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1527</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2837</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2837</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1921</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1921</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2498</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2498</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3302</Reference>
               <Description>Code injection into Python eval statement from a field in a formatted file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3302</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1253</Reference>
               <Description>Eval injection in Python program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-1253</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1471</Reference>
               <Description>chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1471</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2713</Reference>
               <Description>Chain: Execution after redirect triggers eval injection.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-2713</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Direct Dynamic Code Evaluation ('Eval Injection')</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>IDS35-PL</Entry_ID>
               <Entry_Name>Do not invoke the eval form with a string argument</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="35"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 18, &#34;Inline Evaluation&#34;, Page 1095"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Other">Factors: special character errors can play a role in increasing the variety of code that can be injected, although some vulnerabilities do not require special characters at all, e.g. when a single function without arguments can be referenced and a terminator character is not necessary.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Modes_of_Introduction, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Observed_Examples, Other_Notes, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Demonstrative_Examples, Description, Name, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Direct Dynamic Code Evaluation ('Eval Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Insufficient Control of Directives in Dynamically Evaluated Code (aka 'Eval Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Directives in Dynamically Evaluated Code ('Eval Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
   </Weaknesses>
   <Views>
      <View ID="660" Name="Weaknesses in Software Written in Java" Type="Implicit" Status="Draft">
         <Objective>This view (slice) covers issues that are found in Java programs that are not common to all languages.</Objective>
         <Filter>/Weakness_Catalog/Weaknesses/Weakness[./Applicable_Platforms/Language/@Name='Java']</Filter>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a View. Views are not weaknesses and therefore inappropriate to describe the root causes of vulnerabilities.</Rationale>
            <Comments>Use this View or other Views to search and navigate for the appropriate weakness.</Comments>
            <Reasons>
               <Reason Type="View"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Content Team</Submission_Name>
				<Submission_Organization>MITRE</Submission_Organization>
                <Submission_Date>2008-04-11</Submission_Date>
                <Submission_Version>Draft 9</Submission_Version>
                <Submission_ReleaseDate>2008-04-11</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Name, View_Filter, View_Structure</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-09-09">Weaknesses found in the Java Language</Previous_Entry_Name>
         </Content_History>
      </View>
   </Views>
   <External_References>
      <External_Reference Reference_ID="REF-6">
			<Author>Katrina Tsipenyuk</Author>
			<Author>Brian Chess</Author>
			<Author>Gary McGraw</Author>
			<Title>Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors</Title>
			<Publication>NIST Workshop on Software Security Assurance Tools Techniques and Metrics</Publication>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---07</Publication_Day>
			<Publisher>NIST</Publisher>
			<URL>https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-18">
			<Author>Secure Software, Inc.</Author>
			<Title>The CLASP Application Security Process</Title>
			<Publication_Year>2005</Publication_Year>
			<URL>https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-41">
			<Author>Fortify Software</Author>
			<Title>Fortify Descriptions</Title>
			<URL>http://vulncat.fortifysoftware.com</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-42">
			<Author>Beth Stearns</Author>
			<Title>The Java(TM) Tutorial: The Java Native Interface</Title>
			<Publication_Year>2005</Publication_Year>
			<Publisher>Sun Microsystems</Publisher>
			<URL>http://www.eg.bucknell.edu/~mead/Java-tutorial/native1.1/index.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-44">
			<Author>Michael Howard</Author>
			<Author>David LeBlanc</Author>
			<Author>John Viega</Author>
			<Title>24 Deadly Sins of Software Security</Title>
			<Publication>McGraw-Hill</Publication>
			<Publication_Year>2010</Publication_Year>
		</External_Reference>
      <External_Reference Reference_ID="REF-62">
			<Author>Mark Dowd</Author>
			<Author>John McDonald</Author>
			<Author>Justin Schuh</Author>
			<Title>The Art of Software Security Assessment</Title>
			<Edition>1st Edition</Edition>
			<Publication_Year>2006</Publication_Year>
			<Publisher>Addison Wesley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-65">
			<Author>M. Howard</Author>
			<Author>D. LeBlanc</Author>
			<Author>J. Viega</Author>
			<Title>19 Deadly Sins of Software Security</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<Publisher>McGraw-Hill/Osborne</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-76">
			<Author>Sean Barnum</Author>
			<Author>Michael Gegick</Author>
			<Title>Least Privilege</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-174">
			<Author>Web Application Security Consortium</Author>
			<Title>Information Leakage</Title>
			<URL>http://projects.webappsec.org/w/page/13246936/Information%20Leakage</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-175">
			<Author>Brian Chess</Author>
			<Author>Jacob West</Author>
			<Title>Secure Programming with Static Analysis</Title>
			<Publication_Year>2007</Publication_Year>
			<Publisher>Addison-Wesley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-176">
			<Author>Michael Howard</Author>
			<Author>David LeBlanc</Author>
			<Title>Writing Secure Code</Title>
			<Edition>1st Edition</Edition>
			<Publication_Year>2001</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---13</Publication_Day>
			<Publisher>Microsoft Press</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-179">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 16 - Information Exposure Through an Error Message</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---17</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://software-security.sans.org/blog/2010/03/17/top-25-series-rank-16-information-exposure-through-an-error-message</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-349">
			<Author>Andrei Alexandrescu</Author>
			<Title>volatile - Multithreaded Programmer's Best Friend</Title>
			<Publication>Dr. Dobb's</Publication>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---01</Publication_Day>
			<URL>https://drdobbs.com/cpp/volatile-the-multithreaded-programmers-b/184403766</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-350">
			<Author>Steven Devijver</Author>
			<Title>Thread-safe webapps using Spring</Title>
			<URL>https://web.archive.org/web/20170609174845/http://www.javalobby.org/articles/thread-safe/index.jsp</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-351">
			<Author>David Wheeler</Author>
			<Title>Prevent race conditions</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<URL>https://www.ida.liu.se/~TDDC90/literature/papers/SP-race-conditions.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-352">
			<Author>Matt Bishop</Author>
			<Title>Race Conditions, Files, and Security Flaws; or the Tortoise and the Hare Redux</Title>
			<Publication_Year>1995</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<URL>https://seclab.cs.ucdavis.edu/projects/vulnerabilities/scriv/ucd-ecs-95-08.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-353">
			<Author>David Wheeler</Author>
			<Title>Secure Programming for Linux and Unix HOWTO</Title>
			<Publication_Year>2003</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<URL>https://dwheeler.com/secure-programs/Secure-Programs-HOWTO/avoid-race.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-354">
			<Author>Blake Watts</Author>
			<Title>Discovering and Exploiting Named Pipe Security Flaws for Fun and Profit</Title>
			<Publication_Year>2002</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<URL>https://www.blakewatts.com/blog/discovering-and-exploiting-named-pipe-security-flaws-for-fun-and-profit</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-355">
			<Author>Roberto Paleari</Author>
			<Author>Davide Marrone</Author>
			<Author>Danilo Bruschi</Author>
			<Author>Mattia Monga</Author>
			<Title>On Race Vulnerabilities in Web Applications</Title>
			<URL>http://security.dico.unimi.it/~roberto/pubs/dimva08-web.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-356">
			<Title>Avoiding Race Conditions and Insecure File Operations</Title>
			<Publication>Apple Developer Connection</Publication>
			<URL>https://web.archive.org/web/20081010155022/http://developer.apple.com/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-357">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 25 - Race Conditions</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://web.archive.org/web/20100530231203/http://blogs.sans.org:80/appsecstreetfighter/2010/03/26/top-25-series-rank-25-race-conditions/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-374">
			<Author>Tony Sintes</Author>
			<Title>Does Java pass by reference or pass by value?</Title>
			<Publication>JavaWorld.com</Publication>
			<Publication_Year>2000</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>https://web.archive.org/web/20000619025001/https://www.javaworld.com/javaworld/javaqa/2000-05/03-qa-0526-pass.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-375">
			<Author>Herbert Schildt</Author>
			<Title>Java: The Complete Reference, J2SE 5th Edition</Title>
		</External_Reference>
      <External_Reference Reference_ID="REF-453">
			<Author>OWASP</Author>
			<Title>OWASP , Attack Category : Mobile code: object hijack</Title>
			<URL>http://www.owasp.org/index.php/Mobile_code:_object_hijack</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-461">
			<Author>Matthias Kaiser</Author>
			<Title>Exploiting Deserialization Vulnerabilities in Java</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>https://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-462">
			<Author>Sam Thomas</Author>
			<Title>PHP unserialization vulnerabilities: What are we missing?</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---27</Publication_Day>
			<URL>https://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-463">
			<Author>Gabriel Lawrence</Author>
			<Author>Chris Frohoff</Author>
			<Title>Marshalling Pickles: How deserializing objects can ruin your day</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>https://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-464">
			<Author>Heine Deelstra</Author>
			<Title>Unserializing user-supplied data, a bad idea</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<URL>https://drupalsun.com/heine/2010/08/25/unserializing-user-supplied-data-bad-idea</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-465">
			<Author>Manish S. Saindane</Author>
			<Title>Black Hat EU 2010 - Attacking Java Serialized Communication</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>https://www.slideshare.net/msaindane/black-hat-eu-2010-attacking-java-serialized-communication</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-466">
			<Author>Nadia Alramli</Author>
			<Title>Why Python Pickle is Insecure</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---09</Publication_Day>
			<URL>http://michael-rushanan.blogspot.com/2012/10/why-python-pickle-is-insecure.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-467">
			<Author>Nelson Elhage</Author>
			<Title>Exploiting misuse of Python's "pickle"</Title>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://blog.nelhage.com/2011/03/exploiting-pickle/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-468">
			<Author>Chris Frohoff</Author>
			<Title>Deserialize My Shorts: Or How I Learned to Start Worrying and Hate Java Object Deserialization</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---21</Publication_Day>
			<URL>https://speakerdeck.com/frohoff/owasp-sd-deserialize-my-shorts-or-how-i-learned-to-start-worrying-and-hate-java-object-deserialization</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-474">
			<Author>Douglas C. Schmidt</Author>
			<Author>Timothy H. Harrison</Author>
			<Author>Nat Pryce</Author>
			<Title>Thread-Specifc Storage for C/C++</Title>
			<URL>http://www.cs.wustl.edu/~schmidt/PDF/TSS-pattern.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-478">
			<Title>Intrinsic Locks and Synchronization (in Java)</Title>
			<URL>https://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-482">
			<Author>Zvi Gutterman</Author>
			<Title>Hold Your Sessions: An Attack on Java Session-id Generation</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---13</Publication_Day>
			<URL>https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/gm05.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-490">
			<Author>David Bacon et al</Author>
			<Title>The "Double-Checked Locking is Broken" Declaration</Title>
			<URL>http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-491">
			<Author>Jeremy Manson and Brian Goetz</Author>
			<Title>JSR 133 (Java Memory Model) FAQ</Title>
			<URL>http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#dcl</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-911">
			<Author>Stefano Di Paola</Author>
			<Author>Arshan Dabirsiaghi</Author>
			<Title>Expression Language Injection</Title>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---12</Publication_Day>
			<URL>https://mindedsecurity.com/wp-content/uploads/2020/10/ExpressionLanguageInjection.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-912">
			<Author>Dan Amodio</Author>
			<Title>Remote Code with Expression Language Injection</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-954">
			<Author>Mozilla MDN</Author>
			<Title>Equality comparisons and sameness</Title>
			<URL>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness</URL>
			<URL_Date>2017-11-17</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-960">
			<Author>Object Management Group (OMG)</Author>
			<Title>Automated Source Code Maintainability Measure (ASCMM)</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<URL>https://www.omg.org/spec/ASCMM/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-961">
			<Author>Object Management Group (OMG)</Author>
			<Title>Automated Source Code Reliability Measure (ASCRM)</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<URL>http://www.omg.org/spec/ASCRM/1.0/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-962">
			<Author>Object Management Group (OMG)</Author>
			<Title>Automated Source Code Security Measure (ASCSM)</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<URL>http://www.omg.org/spec/ASCSM/1.0/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1031">
			<Title>Null pointer / Null dereferencing</Title>
			<Publication_Year>2019</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<Publisher>Wikipedia</Publisher>
			<URL>https://en.wikipedia.org/wiki/Null_pointer#Null_dereferencing</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1032">
			<Title>Null Reference Creation and Null Pointer Dereference</Title>
			<Publisher>Apple</Publisher>
			<URL>https://developer.apple.com/documentation/xcode/null-reference-creation-and-null-pointer-dereference</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1033">
			<Title>NULL Pointer Dereference [CWE-476]</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<Publisher>ImmuniWeb</Publisher>
			<URL>https://www.immuniweb.com/vulnerability/null-pointer-dereference.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1051">
			<Title>Oracle Java Documentation</Title>
			<URL> https://docs.oracle.com/javase/1.5.0/docs/guide/language/autoboxing.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1052">
			<Author>The Software Engineering Institute</Author>
			<Title>SEI CERT Oracle Coding Standard for Java : Rule 02. Expressions (EXP)</Title>
			<URL>https://wiki.sei.cmu.edu/confluence/display/java/EXP04-J.+Do+not+pass+arguments+to+certain+Java+Collections+Framework+methods+that+are+a+different+type+than+the+collection+parameter+type</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1193">
			<Author>James Kettle</Author>
			<Title>Server-Side Template Injection</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<URL>https://portswigger.net/research/server-side-template-injection</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1194">
			<Author>James Kettle</Author>
			<Title>Server-Side Template Injection: RCE For The Modern Web App</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---27</Publication_Day>
			<URL>https://www.youtube.com/watch?v=3cT0uE7Y87s</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1198">
			<Title>close - Perldoc Browser</Title>
			<URL>https://perldoc.perl.org/functions/close</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1199">
			<Title>io - Core tools for working with streams — Python 3.9.7 documentation</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---02</Publication_Day>
			<URL>https://docs.python.org/3.9/library/io.html#io.IOBase.close</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1200">
			<Title>FileOutputStream (Java Platform SE 7 )</Title>
			<Publication_Year>2020</Publication_Year>
			<URL>https://docs.oracle.com/javase/7/docs/api/java/io/FileOutputStream.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1201">
			<Title>FileOutputStream (Java SE 11 &amp; JDK 11 )</Title>
			<Publication_Year>2021</Publication_Year>
			<URL>https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/FileOutputStream.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1237">
			<Author>CERT Coordination Center</Author>
			<Title>Intel BIOS locking mechanism contains race condition that enables write protection bypass</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<URL>https://www.kb.cert.org/vuls/id/766164/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1279">
			<Author>CWE/CAPEC</Author>
			<Title>Neutralizing Your Inputs: A Log4Shell Weakness Story</Title>
			<URL>https://medium.com/@CWE_CAPEC/neutralizing-your-inputs-a-log4shell-weakness-story-89954c8b25c9</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1280">
			<Author>OWASP</Author>
			<Title>Expression Language Injection</Title>
			<URL>https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection</URL>
		</External_Reference>
   </External_References>
</Weakness_Catalog>